@using System.Text.RegularExpressions

@if (UserService.UseMarkdown && DisableMarkdown == false)
{
    <MudMarkdown Value="@processedValue" CodeBlockTheme="@CodeBlockTheme" />
}
else
{
    <MudText Style="white-space: pre-wrap;">
        @Value
    </MudText>
}

<style>
    .mud-markdown-body p {
        margin-bottom: 0.5rem !important;
    }

    pre code.hljs {
        margin-bottom: 1rem !important;
    }
</style>

@code {
    [Inject] private IUserService UserService { get; set; } = null!;
    [Inject] private IJSRuntime JS { get; set; } = null!;

    [Parameter] public string Value { get; set; } = null!;
    [Parameter] public MudBlazor.CodeBlockTheme CodeBlockTheme { get; set; }
    [Parameter] public bool DisableMarkdown { get; set; } = false;


    private string processedValue = "";


    override protected void OnParametersSet()
    {
        processedValue = ProcessMarkdown(Value);
    }

    protected override void OnInitialized()
    {
        UserService.OnUpdate += StateHasChanged;
    }


    public void Dispose()
    {
        UserService.OnUpdate -= StateHasChanged;
    }

    private readonly HashSet<string> _supportedLanguages = new HashSet<string>
    {
        "1c", "abnf", "accesslog", "ada", "armasm", "avrasm", "actionscript", "angelscript", "apache",
        "applescript", "arcade", "asciidoc", "aspectj", "autohotkey", "autoit", "awk", "axapta",
        "bash", "basic", "bnf", "brainfuck", "csharp", "cs", "c", "cpp", "hpp", "cc", "hh", "c++",
        "h++", "cxx", "hxx", "cal", "cos", "cls", "cmake", "cmake.in", "coq", "csp", "css",
        "capnproto", "capnp", "clojure", "clj", "coffeescript", "coffee", "cson", "iced", "crmsh",
        "crm", "pcmk", "crystal", "cr", "d", "dns", "zone", "bind", "dos", "bat", "cmd", "dart",
        "delphi", "dpr", "dfm", "pas", "pascal", "freepascal", "lazarus", "lpr", "lfm", "diff",
        "patch", "django", "jinja", "dockerfile", "docker", "dsconfig", "dts", "dust", "dst",
        "ebnf", "elixir", "elm", "erlang", "erl", "excel", "xls", "xlsx", "fsharp", "fs", "fix",
        "fortran", "f90", "f95", "gcode", "nc", "gams", "gms", "gauss", "gss", "gherkin", "go",
        "golang", "golo", "gololang", "gradle", "groovy", "html", "xml", "xhtml", "rss", "atom",
        "xjb", "xsd", "xsl", "plist", "svg", "http", "https", "haml", "handlebars", "hbs",
        "html.hbs", "html.handlebars", "haskell", "hs", "haxe", "hx", "hy", "hylang", "ini", "toml",
        "inform7", "i7", "irpf90", "json", "java", "jsp", "javascript", "js", "jsx", "kotlin",
        "kt", "tex", "leaf", "lasso", "ls", "lassoscript", "less", "ldif", "lisp", "livecodeserver",
        "livescript", "ls", "lua", "makefile", "mk", "mak", "markdown", "md", "mkdown", "mkd",
        "mathematica", "mma", "wl", "matlab", "maxima", "mel", "mercury", "mizar", "mojolicious",
        "monkey", "moonscript", "moon", "n1ql", "nsis", "nginx", "nginxconf", "nimrod", "nix",
        "ocaml", "ml", "objectivec", "mm", "objc", "obj-c", "glsl", "openscad", "scad",
        "ruleslanguage", "oxygene", "pf", "pf.conf", "php", "php3", "php4", "php5", "php6", "php7",
        "parser3", "perl", "pl", "pm", "plaintext", "txt", "text", "pony", "pgsql", "postgres",
        "postgresql", "powershell", "ps", "ps1", "processing", "prolog", "properties", "protobuf",
        "puppet", "pp", "python", "py", "gyp", "q", "k", "kdb", "qml", "r", "cshtml", "razor",
        "razor-cshtml", "reasonml", "re", "rib", "rsl", "roboconf", "graph", "instances", "ruby",
        "rb", "gemspec", "podspec", "thor", "irb", "rust", "rs", "sas", "scss", "sql", "p21",
        "step", "stp", "scala", "scheme", "scilab", "sci", "shell", "console", "smali",
        "smalltalk", "st", "stan", "stanfuncs", "stata", "iecst", "solidity", "sol"
    };

    private readonly HashSet<string> _safeLanguages = new HashSet<string>
    {
        "bash", "csharp", "cs", "c", "cpp", "c++", "cmake", "css", "bat", "cmd", "dockerfile", "docker", 
        "excel", "xls", "xlsx", "fsharp", "fortran", "f90", "f95", "go", "golang", "gololang", "html", 
        "xml", "xhtml", "http", "https", "ini", "toml", "json", "java", "javascript", "js", "jsx", "tex",  
        "lisp", "lua", "makefile", "mk", "markdown", "md", "mkdown", "mathematica", "matlab", "php", "php3", 
        "php4", "php5", "php6", "php7", "perl", "plaintext", "txt", "text", "powershell", "ps", "ps1", 
        "python", "py", "r", "re", "ruby", "rust", "rs", "sas", "scss", "sql", "scala", "shell"
    };

    private string ProcessMarkdown(string markdownContent)
    {
        return markdownContent;

        var regex = new Regex(@"\s*```(\w+)?\s*([\s\S]*?)\s*```", RegexOptions.Compiled);
        var newText = regex.Replace(markdownContent, match =>
        {
            var language = match.Groups[1].Value;
            var code = match.Groups[2].Value;

            if (string.IsNullOrWhiteSpace(language) || !_safeLanguages.Contains(language))
            {
                // Handle unsupported languages or missing language specifier
                language = "plaintext"; // or any default language
            }

            return $"\n```{language}\n{code}\n```";
        });
        return newText;
    }
}
