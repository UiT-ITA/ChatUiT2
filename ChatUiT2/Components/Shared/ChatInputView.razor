<div class="ma-2 pa-0" style="position: relative; background-color: var(--mud-palette-background-grey); border-radius:27px;">
    <div style="display: flex; align-items: flex-end; justify-content: space-between;">
        <div style="width: 54px; height: 54px; display: flex; justify-content: center; align-items: center;">
            <MudTooltip Text="Comming soon!" Placement="Placement.Bottom">
                <MudIconButton Icon="@Icons.Material.Filled.AttachFile" Size="Size.Medium" Disabled="true" Style="width:54px; height: 54px;"/>
            </MudTooltip>
        </div>

        <MudTextField @bind-Value="prompt" Variant="Variant.Text" @onkeypress="HandleKeyPress"
                      AutoFocus AutoGrow Immediate Placeholder="Ask anything!" Lines="1" MaxLines="10"
                       Style="position: relative; top: -12px;" Class="ml-0 pl-0"
                       DisableUnderLine />
        <div style="width: 54px; height: 54px; display: flex; justify-content: center; align-items: center;">
            @if (!UserService.Waiting)
            {
                <MudTooltip Text="Send message" Placement="Placement.Bottom">
                    <MudIconButton Icon="@Icons.Material.Filled.Send" Size="Size.Medium" OnClick="SendMessage" Style="width: 54px; height: 54px;" Disabled="string.IsNullOrWhiteSpace(prompt)" />
                </MudTooltip>
            }
            else
            {
                <MudTooltip Text="Stop generation" Placement="Placement.Bottom">
                    <div style="position: relative; width: 28px; height: 28px;">
                        <MudProgressCircular Indeterminate="true" Style="height:28px; width: 28px;" />
                        <MudIconButton Icon="@Icons.Material.Filled.Stop"
                            Style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; opacity: 0; transition: opacity 0.3s ease;"
                            onmouseover="this.style.opacity='1'" onmouseout="this.style.opacity='0'" 
                            OnClick="StopGeneration"/>
                    </div>
                </MudTooltip>
            }
        </div>
    </div>
</div>


@code {
    [Inject] private IUserService UserService { get; set; } = null!;
    [Inject] private IJSRuntime JSRuntime { get; set; } = null!;

    private string _prompt = "";
    private string prompt 
    {
        get => _prompt;
        set
        {
            if (UserService.Waiting)
            {
                _prompt = "";
            }
            else
            {
                _prompt = value;
            }
        }
    }


    protected override void OnInitialized()
    {
        UserService.OnUpdate += StateHasChanged;
        base.OnInitialized();
    }

    public void Dispose()
    {
        UserService.OnUpdate -= StateHasChanged; 
    }


    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(prompt))
        {
            return;
        }

        Console.WriteLine("Sending message: " + prompt);

        string sendPrompt = prompt;
        prompt = "";

        UserService.Waiting = true;
        await Task.Delay(10);
        StateHasChanged();

        // TODO: Implement sending message
        await UserService.SendMessage(sendPrompt);

        UserService.Waiting = false;
        StateHasChanged();
    }

    private async void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey && !UserService.Waiting)
        {
            SendMessage();
        }
    }

    private void StopGeneration()
    {
        // TODO: Implement stopping generation
        UserService.Waiting = false;
        StateHasChanged();
    }
}