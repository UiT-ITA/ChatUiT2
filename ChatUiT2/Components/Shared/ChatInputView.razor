@using ChatUiT2.Services
<div class="ma-2 pa-0 mb-6" style="position: relative; background-color: var(--mud-palette-background-grey); border-radius:27px;">
    
    @if (chatFiles.Count > 0)
    {
        <div class="px-2 pt-2" style="display: flex; flex-wrap: wrap; max-height: 160px; overflow-y: auto;"> 
            @foreach (var file in chatFiles)
            {
                <FileView File="@file" FileList="chatFiles" RemoveFunc="RemoveFile" RemoveTimestamp="false"/>
            }
        </div>
    }

    <div style="display: flex; align-items: flex-end; justify-content: space-between;">
        
        @* Upload files *@
        <div style="width: 54px; height: 54px; display: flex; justify-content: center; align-items: center;">
            <MudTooltip Text="Upload files" Placement="Placement.Bottom">
                <MudFileUpload T="IReadOnlyList<IBrowserFile>" FilesChanged="UploadFiles" Accept="@acceptedFiles"
                               Style="width:54px; height: 54px; background-color:transparent;" InputStyle="background-color:transparent;"
                                Class="ma-0 pa-0">
                    <ButtonTemplate>
                        <MudFab HtmlTag="label" DisableElevation Disabled="!UserService.EnableFileUpload"
                                StartIcon="@Icons.Material.Filled.AttachFile"
                                Style="width:54px; height: 54px; background-color:transparent;"
                                for="@context.Id" />
                    </ButtonTemplate>
                </MudFileUpload>
            </MudTooltip>
        </div>

        @* Alternative allowing more buttons*@
        @* <div class="upload-container">
            <MudTooltip Text="Upload files" Placement="Placement.Bottom">
                <MudFileUpload T="IReadOnlyList<IBrowserFile>" FilesChanged="UploadFiles" Accept="@acceptedFiles"
                               Style="width:54px; height: 54px; background-color:transparent;" InputStyle="background-color:transparent;"
                               Class="ma-0 pa-0">
                    <ButtonTemplate>
                        <MudFab HtmlTag="label" DisableElevation Disabled="!UserService.EnableFileUpload"
                                StartIcon="@Icons.Material.Filled.AttachFile"
                                Style="width:54px; height: 54px; background-color:transparent;"
                                for="@context.Id" />
                    </ButtonTemplate>
                </MudFileUpload>
            </MudTooltip>
            <div class="additional-button-container">
                <MudIconButton Icon="@Icons.Material.Filled.Mic" Class="additional-button" OnClick="RecordFromMicrophone"/>
            </div>
        </div> *@

        @if(recording)
        {
            <div style="width: 28px; height: 54px; display: flex; justify-content: center; align-items: center;">
                <MudIcon Icon="@Icons.Material.Filled.Mic" Color="Color.Error" Size="Size.Small" Style="height: 28px; width: 28px;" />
            </div>
        }

        @* Input field *@
        <MudTextField id="inputField" @bind-Value="prompt" Variant="Variant.Text" @onkeydown="HandleKeyPress"
                      AutoFocus AutoGrow Placeholder="Ask anything!" Lines="1" MaxLines="10"
                       Style="position: relative; top: -12px;" Class="ml-0 pl-0" ReadOnly="generating"
                       DisableUnderLine @ref="inputFieldRef" TextUpdateSuppression="false"/>

        
        @* Send message *@
        <div style="width: 54px; height: 54px; display: flex; justify-content: center; align-items: center;">
            @if (!UserService.Waiting)
            {
                <MudTooltip Text="Send message" Placement="Placement.Bottom">
                    <MudIconButton Icon="@Icons.Material.Filled.Send" Size="Size.Medium" OnClick="SendMessage" Style="width: 54px; height: 54px;" @ref="buttonRef" />
                </MudTooltip>
            }
            else
            {
                <MudTooltip Text="Stop generation" Placement="Placement.Bottom">
                    <div style="position: relative; width: 28px; height: 28px;">
                        <MudProgressCircular Indeterminate="true" Style="height:28px; width: 28px;" />
                        <MudIconButton Icon="@Icons.Material.Filled.Stop"
                            Style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; opacity: 0; transition: opacity 0.3s ease;"
                            onmouseover="this.style.opacity='1'" onmouseout="this.style.opacity='0'" 
                            OnClick="StopGeneration"/>
                    </div>
                </MudTooltip>
            }
        </div>
    </div>
</div>


@* Used for alternative attatch function *@
@* <style>
    .upload-container {
        display: flex;
        align-items: center;
        position: relative;
        transition: width 0.3s ease;
    }

        .upload-container:hover {
            width: 108px; /* Adjust the width as needed */
        }

            .upload-container:hover .input-field {
                margin-left: 54px; /* Adjust the margin as needed */
            }

    .additional-button-container {
        display: none;
        position: absolute;
        right: 0; /* Adjust the position as needed */
        top: 0;
        height: 54px;
        width: 54px;
    }

    .upload-container:hover .additional-button-container {
        display: block;
    }

    .additional-button {
        height: 54px;
        width: 54px;
        background-color: transparent; /* Adjust the background color as needed */
        border: none;
        cursor: pointer;
        transition: opacity 0.3s ease;
        opacity: 0;
    }

    .upload-container:hover .additional-button {
        opacity: 1;
    }
</style> *@


@code {







    [Inject] private IUserService UserService { get; set; } = null!;
    [Inject] private IUpdateService UpdateService { get; set; } = null!;
    [Inject] private IJSRuntime JS { get; set; } = null!;
    [Inject] private ISnackbar Snackbar { get; set; } = null!;

    [Inject] private IStorageService StorageService { get; set; } = null!;

    [Inject] private SpeechService SpeechService { get; set; } = null!;

    private MudTextField<string> inputFieldRef = null!;
    private MudIconButton buttonRef = null!;

    private bool recording = false;

    private bool generating = false;

    private string prompt = "";
    private string _prompt 
    {
        get => _prompt;
        set
        {
            if (generating)
            {
                _prompt = "";
                StateHasChanged();
            }
            else
            {
                _prompt = value;
            }
        }
    }

    private string acceptedFiles
    {
        get => FileTools.GetAcceptedFilesString();
    }


    private List<ChatFile> chatFiles = new List<ChatFile>();

    private WorkItemChat? CurrentChat = null;

    protected override void OnAfterRender(bool firstRender)
    {
        if (UserService.CurrentChat != CurrentChat)
        {
            inputFieldRef.FocusAsync();
            if (CurrentChat == null)
            {
                CurrentChat = UserService.CurrentChat;
                return;
            }
            if (UserService.CurrentChat.Messages.Count == 0)
            {
                CurrentChat = UserService.CurrentChat;
                return;
            }
            CurrentChat = UserService.CurrentChat;
            ClearPrompt();
        }

        if (firstRender)
        {
            UpdateService.OnChatUpdate += StateHasChanged;
            UpdateService.OnGlobalUpdate += StateHasChanged;
        }
    }

    public void Dispose()
    {
        UpdateService.OnChatUpdate -= StateHasChanged;
        UpdateService.OnGlobalUpdate -= StateHasChanged;
    }

    private async void SendMessage()
    {
        if (string.IsNullOrWhiteSpace(prompt))
        {
            StateHasChanged();
            return;
        }

        string sendPrompt = prompt;
        List<ChatFile> files = chatFiles;

        ClearPrompt();

        await UserService.SendMessage(sendPrompt, files);
        generating = false;
        StateHasChanged();
        await inputFieldRef.FocusAsync();
    }

    private async void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey && !UserService.Waiting)
        {
            generating = true;

            await buttonRef.FocusAsync();
            await inputFieldRef.FocusAsync();

            SendMessage();
        }
    }

    private async void ClearPrompt()
    {
        await Task.Delay(100);
        prompt = "";
        await inputFieldRef.Clear();
        chatFiles = new List<ChatFile>();
        await Task.Delay(100);
        StateHasChanged();
    }

    private void StopGeneration()
    {
        // TODO: Implement stopping generation
        UserService.Waiting = false;
        StateHasChanged();
    }

    private async Task<ChatFile?> UploadFile(IBrowserFile file)
    {
        try
        {
            byte[] bytes = new byte[file.Size];
            using (var stream = file.OpenReadStream(maxAllowedSize: 100 * 1024 * 1024))
            {
                int totalBytesRead = 0;
                while (totalBytesRead < file.Size)
                {
                    int bytesRead = await stream.ReadAsync(bytes, totalBytesRead, (int)file.Size - totalBytesRead);
                    if (bytesRead == 0)
                    {
                        break; // end of the stream
                    }
                    totalBytesRead += bytesRead;
                }

                if (totalBytesRead != file.Size)
                {
                    throw new Exception("Failed to read the entire file.");
                }
            }

            ChatFile chatFile = new ChatFile(file.Name, bytes);

            return chatFile;
        }
        catch (Exception e)
        {
            Console.WriteLine("Error reading file: " + e.Message);
            Snackbar.Add("Failed to upload " + file.Name, Severity.Error);
            return null;
        }
    }


    private async Task UploadFiles(IReadOnlyList<IBrowserFile> newFiles)
    {
        try
        {
            foreach (var file in newFiles)
            {
                //Console.WriteLine("Uploading file: " + file.Name);
                if (chatFiles.Select(x => x.FileName).Contains(file.Name))
                {
                    Snackbar.Add(file.Name + " is already uploaded", Severity.Info);
                    //Console.WriteLine("File is already uploaded");
                    continue;
                }

                if (file.Size > 100 * 1024 * 1024)
                {
                    Snackbar.Add(file.Name + " is " + file.Size / 1024 / 1024 + "MB. Maximum filesize is 20MB", Severity.Error);
                    //Console.WriteLine("File is too big");
                    continue;
                }

                var chatFile = await UploadFile(file);
                if (chatFile != null)
                {
                    // Lock mechanism to prevent concurrent modifications
                    lock (chatFiles)
                    {
                        chatFiles.Add(chatFile);
                    }

                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add("Failed to upload " + file.Name, Severity.Error);
                }
            }
        }
        catch (Exception e)
        {
            Console.WriteLine("Error uploading files: " + e.Message);
            Console.WriteLine(e.StackTrace);
        }
        await Task.Delay(100);
        UpdateService.Update(UpdateType.ChatMessage);
    }

    private void RemoveFile(ChatFile file)
    {
        Console.WriteLine("Removing: " + file.FileName);
        lock (chatFiles)
        {
            chatFiles.Remove(file);
        }
        StateHasChanged();
    }

    // private async void RecordFromMicrophone()
    // {
    //     Console.WriteLine("Recording from microphone");
    //     recording = true;
    //     StateHasChanged();

    //     var result = await SpeechService.RecognizeSpeechAsync();


    //     recording = false;
    //     StateHasChanged();

    // }
}