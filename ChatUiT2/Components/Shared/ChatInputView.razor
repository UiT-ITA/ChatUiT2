<div class="ma-2 pa-0 mb-6" style="position: relative; background-color: var(--mud-palette-background-grey); border-radius:27px;">
    <div style="display: flex; align-items: flex-end; justify-content: space-between;">
        <div style="width: 54px; height: 54px; display: flex; justify-content: center; align-items: center;">
            <MudTooltip Text="Comming soon!" Placement="Placement.Bottom">
                @* <MudIconButton Icon="@Icons.Material.Filled.AttachFile" Size="Size.Medium" Disabled="!UserService.EnableFileUpload" Style="width:54px; height: 54px;" OnClick="UploadFile"/> *@
                <MudFileUpload T="IReadOnlyList<IBrowserFile>" FilesChanged="UploadFiles" Accept="@acceptedFiles"
                               Style="width:54px; height: 54px; background-color:transparent;" InputStyle="background-color:transparent;"
                                Class="ma-0 pa-0">
                    <ButtonTemplate>
                        <MudFab HtmlTag="label" DisableElevation Disabled="!UserService.EnableFileUpload"
                                StartIcon="@Icons.Material.Filled.AttachFile"
                                Style="width:54px; height: 54px; background-color:transparent;"
                                for="@context.Id" />
                    </ButtonTemplate>
                </MudFileUpload>
            </MudTooltip>
        </div>

        <MudTextField id="inputField" @bind-Value="prompt" Variant="Variant.Text" @onkeyup="HandleKeyPress"
                      AutoFocus AutoGrow Immediate Placeholder="Ask anything!" Lines="1" MaxLines="10"
                       Style="position: relative; top: -12px;" Class="ml-0 pl-0"
                       DisableUnderLine @ref="inputFieldRef" TextUpdateSuppression="false"/>
        <div style="width: 54px; height: 54px; display: flex; justify-content: center; align-items: center;">
            @if (!UserService.Waiting)
            {
                <MudTooltip Text="Send message" Placement="Placement.Bottom">
                    <MudIconButton Icon="@Icons.Material.Filled.Send" Size="Size.Medium" OnClick="SendMessage" Style="width: 54px; height: 54px;" Disabled="string.IsNullOrWhiteSpace(prompt)" />
                </MudTooltip>
            }
            else
            {
                <MudTooltip Text="Stop generation" Placement="Placement.Bottom">
                    <div style="position: relative; width: 28px; height: 28px;">
                        <MudProgressCircular Indeterminate="true" Style="height:28px; width: 28px;" />
                        <MudIconButton Icon="@Icons.Material.Filled.Stop"
                            Style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; opacity: 0; transition: opacity 0.3s ease;"
                            onmouseover="this.style.opacity='1'" onmouseout="this.style.opacity='0'" 
                            OnClick="StopGeneration"/>
                    </div>
                </MudTooltip>
            }
        </div>
    </div>
</div>

@* List the names of the files selected here: *@
@if (files.Count > 0)
{
    <span>
            @files.Select(f => f.Name).Aggregate((a, b) => $"{a}, {b}")
    </span>
}



@code {
    [Inject] private IUserService UserService { get; set; } = null!;
    [Inject] private IJSRuntime JS { get; set; } = null!;

    private MudTextField<string> inputFieldRef = null!;

    private bool generating = false;

    private string prompt = "";
    private string _prompt 
    {
        get => _prompt;
        set
        {
            if (generating)
            {
                _prompt = "";
                StateHasChanged();
            }
            else
            {
                _prompt = value;
            }
        }
    }

    private string acceptedFiles = ".png, .jpg, .jpeg, .pdf, .txt, .docx";
    private IList<IBrowserFile> files = new List<IBrowserFile>();

    private WorkItemChat? CurrentChat = null;

    protected override void OnAfterRender(bool firstRender)
    {
        if (UserService.CurrentChat != CurrentChat)
        {
            inputFieldRef.FocusAsync();
            if (CurrentChat == null)
            {
                return;
            }
            if (UserService.CurrentChat.Messages.Count == 0)
            {
                return;
            }

            CurrentChat = UserService.CurrentChat;
            prompt = "";
            files = new List<IBrowserFile>();
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        UserService.OnUpdate += StateHasChanged;
        base.OnInitialized();
    }

    public void Dispose()
    {
        UserService.OnUpdate -= StateHasChanged; 
    }


    private async void SendMessage()
    {
        if (string.IsNullOrWhiteSpace(prompt))
        {
            StateHasChanged();
            return;
        }

        string sendPrompt = prompt;
        DelayedPromptClear();

        await UserService.SendMessage(sendPrompt);
        generating = false;
        StateHasChanged();
        await inputFieldRef.FocusAsync();
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey && !UserService.Waiting)
        {
            generating = true;
            SendMessage();
        }
    }

    private async void DelayedPromptClear()
    {
        await Task.Delay(100);
        await inputFieldRef.Clear();
        await Task.Delay(100);


        StateHasChanged();
    }

    private void StopGeneration()
    {
        // TODO: Implement stopping generation
        UserService.Waiting = false;
        StateHasChanged();
    }

    private void UploadFiles(IReadOnlyList<IBrowserFile> newFiles)
    {
        foreach (var file in newFiles)
        {
            files.Add(file);
        }
    }
}