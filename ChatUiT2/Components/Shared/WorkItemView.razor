
<MudChip T="string" Style="@GetChipStyle()" Class="pa-0 mx-1 my-0" Size="Size.Small" OnClick="SelectWorkItem" >
    @if (!isEditing)
    {
        <div class="d-flex align-items-center" style="width: 220px;">

            @if (workItem.IsFavorite)
            {
                <MudIcon Icon="@Icons.Material.Filled.Star" Size="Size.Large" Class="" Style="margin-top: auto; margin-bottom: auto;" Color="Color.Warning"/>
            }

            <MudText Typo="Typo.body1" Class="mt-1 ml-1" Color="Color.Inherit" Style="@(workItem.Persistant ? "var(--mud-palette-text-primary)" : "color:gray")">@workItem.Name</MudText>
            <MudSpacer />
        
            @if (IsSelected())
            {
                <MudMenu Dense Size="Size.Small" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
                    <ActivatorContent>
                        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Class="ms-auto" Style="margin-top: auto; margin-bottom: auto; height: 24px; width: 24px;" />

                    </ActivatorContent>

                    <ChildContent>
                        <MudMenuItem Style="height:28px" OnClick="StartEditing">
                            <MudStack Row>
                                <MudIcon Icon="@Icons.Material.Filled.Edit" Size="Size.Small"/>
                                <MudText Typo="Typo.body2">Rename</MudText>
                            </MudStack>
                        </MudMenuItem>
                        <MudMenuItem Style="height:28px" OnClick="@(async () => {workItem.IsFavorite = !workItem.IsFavorite; await UserService.UpdateWorkItem(workItem);})">
                            <MudStack Row>
                                @if (workItem.IsFavorite)
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Star" Size="Size.Small"/>
                                    <MudText Typo="Typo.body2">Remove as favorite</MudText>
                                }
                                else
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Star" Size="Size.Small"/>
                                    <MudText Typo="Typo.body2">Add as favorite</MudText>
                                }
                            </MudStack>
                        </MudMenuItem>    
                        <MudMenuItem Style="height:28px" OnClick="@(() => UserService.DeleteWorkItem(workItem))">
                            <MudStack Row>
                                <MudIcon Icon="@Icons.Material.Filled.Delete" Size="Size.Small"/>
                                <MudText Typo="Typo.body2">Delete</MudText>
                            </MudStack>
                        </MudMenuItem>
                    </ChildContent>

                </MudMenu>
            }
       </div>
   }
   else
   {
       <div onkeydown="keydownhandler(event)">
           <MudTextField @bind-Value="newName" AutoFocus Immediate Variant="Variant.Text" Style="height:28px; width:210px" 
                Class="pa-0 ma-0" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Check" Underline="false"
                OnAdornmentClick="StopEditing" @onfocusout="StopEditing" @onkeydown="OnKeyDown" />
       </div>
   }

</MudChip>


<script>
    function keydownhandler(e) {
        if (e.code === "Space") {
            e.stopPropagation();
        }
        if (e.code === "Backspace") {
            e.stopPropagation();
        }
        if (e.code === "Delete") {
            e.stopPropagation();
        }
    }
</script>

@code {
    [Parameter] public IWorkItem workItem { get; set; } = null!;
    [Inject] private IUserService UserService { get; set; } = null!;
    [Inject] private IUpdateService UpdateService { get; set; } = null!;
    [Inject] private NavigationManager Nav { get; set; } = null!;

    private string newName { get; set; } = string.Empty;

    public bool isEditing { get; set; } = false;

    override protected void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            UpdateService.OnGlobalUpdate += StateHasChanged;
        }
    }

    public void Dispose()
    {
        UpdateService.OnGlobalUpdate -= StateHasChanged;
    }

    private bool IsSelected()
    {
        return workItem.Id == UserService.CurrentWorkItem.Id;
    }

    private void SelectWorkItem()
    {
        UserService.SetWorkItem(workItem);
    }


    private Color GetBackgroundColor()
    {
        if (UserService.IsDarkMode)
        {
            if (IsSelected())
            {
                return Color.Default;
            }
            else
            {
                return Color.Dark;
            }
        }
        else
        {
            if (IsSelected())
            {
                return Color.Default;
            }
            else
            {
                return Color.Dark;
            }
        }
    }

    private string GetChipStyle()
    {
        string backgroundColor = "";

        if (IsSelected())
        {
            // backgroundColor = "--mud-palette-surface";
            // backgroundColor = "background-color: rgba(255,255,255,0.1);";
            backgroundColor = "background-color: var(--mud-palette-background-gray);";
        }
        else
        {
            backgroundColor = "background-color: transparent";
            //backgroundColor = "background-color: var(--mud-palette-drawer-background);";
        }

        return $"width: calc(100% - 8px); height:32px; {backgroundColor}";
    }

    private void StartEditing()
    {
        isEditing = true;
        newName = workItem.Name;
        StateHasChanged();
    }

    private async Task StopEditing()
    {
        isEditing = false;
        if (string.IsNullOrWhiteSpace(newName))
        {
            return;
        }
        if (newName != workItem.Name)
        {
            workItem.Name = newName;
            await UserService.UpdateWorkItem(workItem);
        }
        UpdateService.Update(UpdateType.Global);
    }
    
    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await StopEditing();
        }
    }

    private async Task ToggleFavorite()
    {
        workItem.IsFavorite = !workItem.IsFavorite;
        if (workItem.IsFavorite && !workItem.Persistant)
        {
            workItem.Persistant = true;
        }
        
        await UserService.UpdateWorkItem(workItem);
        UpdateService.Update(UpdateType.Global);
    }

}
