
<MudMenu AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft" Dense >
    <ActivatorContent>
        <MudButton Class="@Class" Style="height:48px;">
            <MudText Typo="Typo.h4" Color="Color">@(UserService.CurrentChat.Settings.Model)</MudText>
            <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowDown" Color="Color"/>
        </MudButton>
    </ActivatorContent>
    <ChildContent>
        @foreach (var model in Models)
        {
            <MudMenuItem OnClick="@(() => SelectModel(model))">
                <div class="d-flex align-items-center" style="width: 300px;">
                    <MudIcon Icon="@GetIcon(model.Name)" Size="Size.Large" Class="me-2" Style="margin-top: auto; margin-bottom: auto;" />
                    <div class="flex-grow-1 d-flex flex-column justify-content-center">
                        <MudText Typo="Typo.h4" Class="m-0">@model.Name</MudText>
                        <MudText Typo="Typo.body2" Class="m-0">@model.Description</MudText>
                    </div>
                    @if (UserService.CurrentChat.Settings.Model == model.Name)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Check" Class="ms-auto" Style="margin-top: auto; margin-bottom: auto;" />
                    }
                </div>
            </MudMenuItem>
        }
    </ChildContent>
</MudMenu>

@code {
    [Inject] private IUserService UserService { get; set; } = null!;
    [Inject] private IConfigService ConfigService { get; set; } = null!;
    [Inject] private IUpdateService UpdateService { get; set; } = null!;

    [Parameter] public Color Color { get; set; } = Color.Tertiary;
    [Parameter] public string Class { get; set; } = "";


    private List<Model> Models { get; set; } = new List<Model>();

    override protected void OnInitialized()
    {
        if (Models.Count == 0)
        {
            Models = ConfigService.GetModels();
            StateHasChanged();
        }
    }

    override protected void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            UpdateService.OnGlobalUpdate += StateHasChanged;
        }
    }

    public void Dispose()
    {
        UpdateService.OnGlobalUpdate -= StateHasChanged;
    }


    private string GetIcon(string model)
    {
        return model switch
        {
            "GPT-4o" => Icons.Material.Filled.HotelClass,
            "GPT-4-Turbo" => Icons.Material.Filled.Star,
            "GPT-35-Turbo" => Icons.Material.Filled.StarHalf,
            "Orakel" => Icons.Material.Filled.PersonSearch,
            _ => Icons.Material.Filled.StarOutline
        };
    }


    private void SelectModel(Model model)
    {
        UserService.CurrentChat.Settings.Model = model.Name;

        if (UserService.CurrentChat.Settings.MaxTokens > model.MaxTokens)
        {
            UserService.CurrentChat.Settings.MaxTokens = model.MaxTokens;
        }


        UpdateService.Update(UpdateType.WorkItem);
        UpdateService.Update(UpdateType.Global);

    }
}
