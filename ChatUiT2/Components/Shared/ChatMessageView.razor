@using ChatUiT2.Services

@* Render message here *@

<MudPaper Class="pa-0 ma-2 mb-6 hover-container" Elevation="0" Style=@($"max-width: 100%; min-width: 300px; border-radius: 16px; {(!isUserMessage ? "background-color: transparent;" : "")}")>
    <MudStack>

        <MudStack Row Style=@($"{(isUserMessage ? "background-color: var(--mud-palette-background-grey);" : "")} border-top-left-radius: 16px; border-top-right-radius: 16px;")>
            <div style="width: 40px; height: 40px; display: flex; justify-content: center; align-items: center; flex-shrink:0;">
                <MudIcon Icon="@GetIcon()" Size="Size.Large" Style="opacity:0.6;"/>
            </div>
            <MudSpacer />
            <MudText Class="mt-2" Style="opacity: 0.5;" Typo="Typo.subtitle2">@timeStampString</MudText>
            <MudSpacer />

            @if (!isEditing)
            {
                <div class="fade-in-button" style="width: 40px; height: 40px; display: flex; justify-content: center; align-items: center; flex-shrink:0;">
                    @if (audioState == AudioState.Idle)
                    {
                        <MudIconButton Style="width: 40px; height: 40px;" Icon="@Icons.Material.Filled.Hearing" Size="Size.Medium" OnClick="PlayMessage" />
                    }
                    else if (audioState == AudioState.Loading)
                    {
                        // Show spinner
                        <MudProgressCircular Indeterminate="true" Size="Size.Small" />
                    }
                    else if (audioState == AudioState.Playing)
                    {
                        <MudIconButton Style="width: 40px; height: 40px;" Icon="@Icons.Material.Filled.Pause" Size="Size.Medium" OnClick="PauseMessage" />
                    }
                
                
                </div>

                @if (isUserMessage)
                {
                    <div class="fade-in-button" style="width: 40px; height: 40px; display: flex; justify-content: center; align-items: center; flex-shrink:0;">
                        <MudIconButton Style="width: 40px; height: 40px;" Icon="@Icons.Material.Filled.Edit" Size="Size.Medium" OnClick="StartEdit" />
                    </div>
                }
                @if (!isUserMessage)
                {
                    <div class="fade-in-button" style="width: 40px; height: 40px; display: flex; justify-content: center; align-items: center; flex-shrink:0;">
                        <MudIconButton Style="width: 40px; height: 40px;" Icon="@Icons.Material.Filled.ContentCopy" Size="Size.Medium" OnClick="CopyToClipboard">Copy</MudIconButton>
                    </div>
                }
                <div class="fade-in-button" style="width: 40px; height: 40px; display: flex; justify-content: center; align-items: center; flex-shrink:0;">
                    <MudIconButton Style="width: 40px; height: 40px;" Icon="@Icons.Material.Filled.Sync" Size="Size.Medium" OnClick="Regenerate">Regenerate</MudIconButton>
                </div>
            }
            else
            {
                <div style="width: 40px; height: 40px; display: flex; justify-content: center; align-items: center; flex-shrink:0;">
                    <MudIconButton Style="width: 40px; height: 40px;" Icon="@Icons.Material.Filled.Close" Size="Size.Medium" OnClick="CancelEdit" />
                </div>
                <div style="width: 40px; height: 40px; display: flex; justify-content: center; align-items: center; flex-shrink:0;">
                    <MudIconButton Style="width: 40px; height: 40px;" Icon="@Icons.Material.Filled.Check" Size="Size.Medium" OnClick="StopEdit" />
                </div>
            }
        </MudStack>
        @if (Message.Files.Count > 0)
        {
            <div class="px-2 pt-2" style="display: flex; flex-wrap: wrap; max-height: 160px; overflow-y: auto;">
                @foreach (var file in Message.Files)
                {
                    <FileView File="@file" />
                }
            </div>
        }
        <div class="mx-6 mb-4">
            @if (isEditing)
            {
                <MudTextField T="string" @bind-Value="newContent" Variant="Variant.Text" Underline="false" AutoFocus AutoGrow Style="position: relative; top: -12px;" Class="ma-0 pa-0" />
            }
            else
            {
                <MyMarkdown Value="@Message.Content" CodeBlockTheme="CodeBlockTheme" DisableMarkdown="isUserMessage" />
            }
        </div>
                
    </MudStack>
</MudPaper>


<style>
    .hover-container {
        position: relative;
    }

    .fade-in-button {
        opacity: 0.1;
        transition: opacity 0.3s ease-in-out;
    }

    .hover-container:hover .fade-in-button {
        opacity: 1;
    }

</style>

@code {
    [Inject] private IUserService UserService { get; set; } = null!;
    [Inject] private ISnackbar Snackbar { get; set; } = null!;
    [Inject] private IJSRuntime JS { get; set; } = null!;
    [Inject] private IUpdateService UpdateService { get; set; } = null!;
    [Inject] private SpeechService SpeechService { get; set; } = null!;

    [Parameter] public ChatMessage Message { get; set; } = null!;

    string audioBase64 = "";

    enum AudioState
    {
        Idle,
        Loading,
        Playing
    }

    AudioState audioState = AudioState.Idle;
    string audioId = Guid.NewGuid().ToString();


    private bool isUserMessage => Message.Role == ChatMessageRole.User;
    private string timeStampString { get
        {
            // TODO: change to user's timezone dynamically
            TimeZoneInfo norwegianTimeZone = TimeZoneInfo.FindSystemTimeZoneById("W. Europe Standard Time");
            DateTime norwegianTime = TimeZoneInfo.ConvertTime(Message.Created, norwegianTimeZone);

            return norwegianTime.ToString("dd.MM.yy HH:mm");
        }
    }

    private CodeBlockTheme CodeBlockTheme => UserService.IsDarkMode ? CodeBlockTheme.Vs2015 : CodeBlockTheme.Vs;


    private bool isEditing = false;
    private string newContent = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            UpdateService.OnChatUpdate += StateHasChanged;
        }
        await JS.InvokeVoidAsync("updateScroll", "chatContainer");
    }


    public void Dispose()
    {
        UpdateService.OnChatUpdate -= StateHasChanged;
    }


    private string GetIcon()
    {
        if (Message.Status == ChatMessageStatus.Error)
        {
            return Icons.Material.Filled.Error;
        }
        if (Message.Role == ChatMessageRole.User)
        {
            return Icons.Material.Filled.Person;
        }

        return Icons.Material.Filled.Android;
    }

    private void StartEdit()
    {
        isEditing = true;
        newContent = Message.Content;
        StateHasChanged();
    }

    private async Task StopEdit()
    {
        isEditing = false;
        if (newContent != Message.Content)
        {
            Message.Content = newContent;
            Message.Created = DateTimeTools.GetTimestamp();

            int index = UserService.CurrentChat.Messages.IndexOf(Message);
            await UserService.RegerateFromIndex(index);
        }
    }

    private void CancelEdit()
    {
        isEditing = false;
        StateHasChanged();
    }

    private void CopyToClipboard()
    {
        JS.InvokeVoidAsync("navigator.clipboard.writeText", Message.Content);
        Snackbar.Add("Copied to clipboard", Severity.Success);
    }

    private async Task Regenerate()
    {
        int index = UserService.CurrentChat.Messages.IndexOf(Message);

        if (!isUserMessage)
        {
            index -= 1;
        }
        await UserService.RegerateFromIndex(index);
    }

    private string GetTimestamp()
    {
        TimeZoneInfo norwegianTimeZone = TimeZoneInfo.FindSystemTimeZoneById("W. Europe Standard Time");
        DateTime norwegianTime = TimeZoneInfo.ConvertTime(Message.Created, norwegianTimeZone);

        return norwegianTime.ToString("dd.mm.yy HH:mm");
    }

    private async void PlayMessage()
    {
        if (string.IsNullOrEmpty(audioBase64))
        {
            audioState = AudioState.Loading;
            StateHasChanged();
            audioBase64 = await SpeechService.GenerateSpeechAsync(Message.Content);
        }
        if (!string.IsNullOrEmpty(audioBase64))
        {
            audioState = AudioState.Playing;
            SpeechService.PlayAudio(audioBase64, OnAudioEnded);

            //await JS.InvokeVoidAsync("playAudio", audioBase64);
            StateHasChanged();
        }
    }

    private async void PauseMessage()
    {
        await Task.Delay(1);
        SpeechService.PauseAudio();
        audioState = AudioState.Idle;
        StateHasChanged();
    }

    private void OnAudioEnded()
    {
        audioState = AudioState.Idle;
        StateHasChanged();
    }
}
