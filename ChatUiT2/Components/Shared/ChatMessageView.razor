@if (Message.Status == ChatMessageStatus.Error)
{
    <MudPaper Class="pa-0 ma-2" Style="max-width: 100%; min-width: 600px; overflow-wrap: break-word; word-break: break-word; border-radius:32px; min-height: 64px; background-color:transparent;" Elevation="0">
        <MudStack Row>

            <div style="width: 64px; height: 64px; display: flex; justify-content: center; align-items: center; flex-shrink:0;">
                <MudIcon Icon="@Icons.Material.Filled.Error" Size="Size.Large" />
            </div>

            <div class="flex-grow-1 pt-5 pb-3" style="display: flex; flex-direction: column; overflow: hidden;">
                <MudMarkdown Value="@Message.Content" CodeBlockTheme="CodeBlockTheme.AtomOneDark" />
            </div>

            <div style="width: 64px; height: 64px; display: flex; justify-content: center; align-items: center; flex-shrink:0;">
                 <MudIconButton Icon="@Icons.Material.Filled.Sync" OnClick="Regenerate">Regenerate</MudIconButton>
            </div>

        </MudStack>
    </MudPaper>
}
else if (Message.Role == ChatMessageRole.User)
{
    <MudPaper Class="pa-0 ma-2" Elevation="0"Style="max-width: 100%; min-width: 600px; overflow-wrap: break-word; word-break: break-word; border-radius:32px; min-height: 64px;">
        <MudStack Row>
            <div style="width: 64px; height: 64px; display: flex; justify-content: center; align-items: center; flex-shrink:0;">
                <MudIcon Icon="@Icons.Material.Filled.Person" Size="Size.Large" />
            </div>
            @if (!isEditing)
            {
                <div class="flex-grow-1 pt-5 pb-3">
                    <MudMarkdown Value="@Message.Content" CodeBlockTheme="CodeBlockTheme.AtomOneDark"/>
                </div>

                <div style="width: 64px; height: 64px; display: flex; justify-content: center; align-items: center; flex-shrink:0;">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="StartEdit"/>
                </div>
            }
            else
            {
                <div class="flex-grow-1">
                    <MudTextField T="string" @bind-Value="newContent"  Variant="Variant.Text" DisableUnderLine
                            AutoFocus AutoGrow Style="position: relative; top: -12px;" Class="ma-0 pa-0" />
                </div>
                <div style="width: 64px; height: 64px; display: flex; justify-content: center; align-items: center; flex-shrink:0;">
                    <MudIconButton Icon="@Icons.Material.Filled.Check" Size="Size.Small" OnClick="StopEdit" />
                </div>
            }
        </MudStack>
    </MudPaper>
}
else
{
    <MudPaper Class="pa-0 ma-2" Style="max-width: 100%; min-width: 600px; overflow-wrap: break-word; word-break: break-word; border-radius:32px; min-height: 64px; background-color:transparent;" Elevation="0">
        <MudStack Row>

            <div style="width: 64px; height: 64px; display: flex; justify-content: center; align-items: center; flex-shrink:0;">
                <MudIcon Icon="@Icons.Material.Filled.Android" Size="Size.Large" />
            </div>

            <div class="flex-grow-1 pt-5 pb-3" style="display: flex; flex-direction: column; overflow: hidden;">
                <MyMarkdown Value="@Message.Content" CodeBlockTheme="CodeBlockTheme.AtomOneDark" />
            </div>

            <div style="width: 64px; height: 64px; display: flex; justify-content: center; align-items: center; flex-shrink:0;">
                <MudMenu AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" Dense>
                    <ActivatorContent>
                        <MudIcon Icon="@Icons.Material.Filled.MoreVert" Size="Size.Medium" />
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem Icon="@Icons.Material.Filled.CopyAll" OnClick="CopyToClipboard">Copy</MudMenuItem>
                        <MudMenuItem Icon="@Icons.Material.Filled.Sync" OnClick="Regenerate">Regenerate</MudMenuItem>
                    </ChildContent>
                </MudMenu>
            </div>

        </MudStack>
    </MudPaper>
}


<style>
    .mud-markdown-body p {
        margin-bottom: 0.5rem !important;
    }

    pre code.hljs {
        margin-bottom: 1rem !important;
    }
</style>



@code {
    [Parameter] public ChatMessage Message { get; set; } = null!;

    [Inject] public IUserService UserService { get; set; } = null!;
    [Inject] public IDialogService DialogService { get; set; } = null!;
    [Inject] public IJSRuntime JSRuntime { get; set; } = null!;
    [Inject] public ISnackbar Snackbar { get; set; } = null!;

    private bool isEditing = false;
    private string newContent = "";


    override protected void OnInitialized()
    {
        UserService.OnUpdate += StateHasChanged;
        var markdown = new MudBlazor.MudMarkdown();
    }

    public void Dispose()
    {
        UserService.OnUpdate -= StateHasChanged;
    }

    private void StartEdit()
    {
        newContent = Message.Content;
        isEditing = true;
        StateHasChanged();
    }

    private async Task StopEdit()
    {
        isEditing = false;
        if (newContent != Message.Content)
        {
            // Delete this and all following messages in UserService.CurrentWorkItem.Messages
            int index = UserService.CurrentChat.Messages.IndexOf(Message);
            for (int i = UserService.CurrentChat.Messages.Count - 1; i >= index; i--)
            {
                UserService.CurrentChat.Messages.RemoveAt(i);
            }

            await UserService.SendMessage(newContent);
        }

    }

    private void CancelEdit()
    {
        isEditing = false;
        StateHasChanged();
    }

    private async Task CopyToClipboard()
    {
        await JSRuntime.InvokeVoidAsync("copyTextToClipboard", Message.Content);
        Snackbar.Add("Assistant reply is copied to your clipboard", Severity.Success);
    }

    private async Task Regenerate()
    {
        int index = UserService.CurrentChat.Messages.IndexOf(Message);
        UserService.CurrentChat.Messages.RemoveRange(
            index: index,
            count: UserService.CurrentChat.Messages.Count - index
        );
        await UserService.SendMessage(null);
    }

}
