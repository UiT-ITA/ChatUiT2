<div class="container" style="overflow: hidden;">
    <MudPaper Class="pa-4" Style="border-radius: 8px;" Elevation="0">

        @if (IncludeHeader)
        {
            <div class="px-2 pb-2 text-center">
                <MudText Typo="Typo.h4">Chat settings</MudText>
                <MudText Typo="Typo.body2">Customize the chat experience</MudText>
            </div>
        }
        <MudDivider />
        <MudGrid Class="pa-2" AlignItems="FlexStart">
            <MudItem xs="12" md="6" Class="d-flex align-items-center" Style="min-width: 300px;">
                <MudIcon Icon="@Icons.Material.Filled.AutoAwesome" Size="Size.Large" Class="me-2" />
                <div>
                    <MudText Typo="Typo.h6" Class="m-0">Model</MudText>
                    <MudText Typo="Typo.subtitle2" Class="m-0">Select the model you want</MudText>
                </div>
            </MudItem>
            <MudItem xs="12" md="6" Style="min-width: 300px;">
                <ModelSelect />
            </MudItem>
        </MudGrid>
        <MudDivider />
        <MudGrid Class="pa-2" AlignItems="FlexStart">
            <MudItem xs="12" md="6" Class="d-flex align-items-center" Style="min-width: 300px;">
                <MudIcon Icon="@Icons.Material.Filled.Science" Size="Size.Large" Class="me-2" />
                <div>
                    <MudText Typo="Typo.h6" Class="m-0">@($"Temperature: {UserService.CurrentChat.Settings.Temperature:F1}")</MudText>
                    <MudText Typo="Typo.subtitle2" Class="m-0">Controls creativity of model</MudText>
                </div>
            </MudItem>
            <MudItem xs="12" md="6" Style="min-width: 300px;">
                <MudSlider T="float" Max="1.0f" Min="0.0f" Step="0.1f" @bind-Value="UserService.CurrentChat.Settings.Temperature" Size="Size.Large" Color="Color.Info" />
            </MudItem>
        </MudGrid>
        <MudDivider />
        <MudGrid Class="pa-2" AlignItems="FlexStart">
            <MudItem xs="12" md="6" Class="d-flex align-items-center" Style="min-width: 300px;">
                <MudIcon Icon="@Icons.Material.Filled.ListAlt" Size="Size.Large" Class="me-2" />
                <div>
                    <MudText Typo="Typo.h6" Class="m-0">@($"Tokens: {UserService.CurrentChat.Settings.MaxTokens}")</MudText>
                    <MudText Typo="Typo.subtitle2" Class="m-0">Controls answer length</MudText>
                </div>
            </MudItem>
            <MudItem xs="12" md="6" Style="min-width: 300px;">
                <MudSlider T="int" Max="@maxTokens" Min="@(maxTokens/16)" Step="@(maxTokens/16)" @bind-Value="UserService.CurrentChat.Settings.MaxTokens" Size="Size.Large" Color="Color.Info" />
            </MudItem>
        </MudGrid>
        <MudDivider />
        <MudGrid Class="pa-2" AlignItems="FlexStart">
            <MudItem xs="12" md="6" Class="d-flex align-items-center" Style="min-width: 300px;">
                <MudIcon Icon="@Icons.Material.Filled.Chat" Size="Size.Large" Class="me-2" />
                <div>
                    <MudText Typo="Typo.h6" Class="m-0">System prompt</MudText>
                    <MudText Typo="Typo.subtitle2" Class="m-0">Instructions to the model</MudText>
                </div>
            </MudItem>
            <MudItem xs="12" md="6" Style="min-width: 300px;">
                <MudMenu Label="Load default">
                    @foreach (var prompt in prompts)
                    {
                        <MudMenuItem OnClick="() => LoadPrompt(prompt.Content)">@prompt.Name</MudMenuItem>
                    }
                </MudMenu>
                @* <MudTextField T="string" Lines="10" TextUpdateSuppression="false" @bind-Text="UserService.CurrentChat.Settings.Prompt" DebounceInterval="500" Variant="Variant.Filled" DisableUnderLine /> *@
            </MudItem>
            <MudTextField Class="mx-2" T="string" Lines="10" TextUpdateSuppression="false" @bind-Text="UserService.CurrentChat.Settings.Prompt" DebounceInterval="500" Variant="Variant.Filled" DisableUnderLine />

        </MudGrid>
        <MudDivider />
        <MudGrid Class="pa-2" AlignItems="FlexStart">
            <MudItem xs="12" md="6" Class="d-flex align-items-center" Style="min-width: 300px;">
                <MudIcon Icon="@Icons.Material.Filled.Cloud" Size="Size.Large" Class="me-2" />
                <div>
                    <MudText Typo="Typo.h6" Class="m-0">Save chat</MudText>
                    <MudText Typo="Typo.subtitle2" Class="m-0">Save to cloud</MudText>
                </div>
            </MudItem>
            <MudItem xs="12" md="6" Style="min-width: 300px;">
                <MudStack Row>
                    <MudSwitch Class="ml-1" @bind-Value="CurrentWorkItemPersistant" T="bool" ThumbIconColor="Color.Dark" Color="Color.Success" UnCheckedColor="Color.Error" ThumbIcon="@(CurrentWorkItemPersistant ? Icons.Material.Filled.CloudDone : Icons.Material.Filled.CloudOff)" Size="Size.Large" />
                    @if (CurrentWorkItemPersistant)
                    {
                        <MudText Typo="Typo.h6" Class="mt-3">Chat will be saved</MudText>
                    }
                    else
                    {
                        <MudText Typo="Typo.h6" Class="mt-3">Temporary chat</MudText>
                    }
                </MudStack>
            </MudItem>
        </MudGrid>
        <MudDivider />
        <MudStack Row Class="mx-2" Style="justify-content: flex-end;">
            <MudButton Variant="Variant.Text" Class="mt-3" Color="Color.Info" OnClick="UserService.SetDefaultChatSettings">Set as default</MudButton>
        </MudStack>
    </MudPaper>
</div>



@code {

    [Inject] private IUserService UserService { get; set; } = null!;
    [Inject] private IUpdateService UpdateService { get; set; } = null!;

    [Parameter] public bool IncludeHeader { get; set; } = false;
    [Parameter] public bool IncludeInstructions { get; set; } = false;

    private List<Prompt> prompts = new List<Prompt>
    {
        new Prompt { Name = "New", Content = "" },
        new Prompt { Name = "Default", Content = "You are a helpful ai assistant named ChatUiT. Help the user to the best of your ability. The users name is {{fullname}}. This conversation was started on {{dateAndTime}}. The response can be styled using markdown." },
        new Prompt { Name = "Pirate speak", Content = "You are a pirate-themed AI assistant. Always speak like a pirate, even if it means being less helpful. The user's name is {{fullname}}. This conversation was started on {{dateAndTime}}. The response can be styled using markdown. Arrr!" },
        new Prompt { Name = "Proofreading", Content = "You are an AI assistant specialized in proofreading text. Your task is to review and correct grammar, punctuation, and spelling errors in the provided text. Provide suggestions for improving clarity and coherence. This service is being used at a university. The response can be styled using markdown." },
        new Prompt { Name = "Tutor", Content = "You are an AI assistant specialized in tutoring students. Provide explanations, answer questions, and offer guidance on various academic subjects. Tailor your responses to the student's level of understanding. The user's name is {{fullname}}. This conversation was started on {{dateAndTime}}. The response can be styled using markdown." },
        new Prompt { Name = "Lecture Planner", Content = "You are an AI assistant specialized in planning lectures. Help educators organize and structure their lectures, including creating outlines, suggesting relevant materials, and providing tips for effective teaching. The user's name is {{fullname}}. This conversation was started on {{dateAndTime}}. The response can be styled using markdown." },
        new Prompt { Name = "Tromsø City Guide", Content = "You are an AI assistant specialized in providing information about Tromsø. Offer recommendations on attractions, restaurants, events, and local culture. Help users plan their visit to Tromsø. The user's name is {{fullname}}. This conversation was started on {{dateAndTime}}. The response can be styled using markdown." },
        new Prompt { Name = "Emoji", Content = "Answer the user as best as you can using ONLY emojis. No text allowed in your answer at all."}

    };

    private string? selectedPrompt { get; set; } = string.Empty;

    private string cachedModel = "";
    private int _maxTokens = 4096;
    private int maxTokens
    {
        get
        {
            if (cachedModel != UserService.CurrentChat.Settings.Model)
            {
                cachedModel = UserService.CurrentChat.Settings.Model;
                _maxTokens = GetMaxTokens();
            }
            return _maxTokens;
        }
    }

    private bool CurrentWorkItemPersistant
    {
        get => UserService.CurrentWorkItem.Persistant;
        set
        {
            UserService.CurrentWorkItem.Persistant = value;
            UpdateService.Update(UpdateType.Global);
        }
    }


    override protected void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            UpdateService.OnGlobalUpdate += StateHasChanged;

            StateHasChanged();
        }
    }

    public void Dispose()
    {
        UpdateService.OnGlobalUpdate -= StateHasChanged;
    }

    private int GetMaxTokens()
    {
        int maxTokens = UserService.GetMaxTokens();

        return maxTokens;
    }

    private string ReplaceKeyworkds(string content)
    {
        content = content.Replace("{{fullname}}", UserService.Name);
        content = content.Replace("{{dateAndTime}}", DateTime.Now.ToString("yyyy-MM-dd HH:mm"));
        return content;
    }

    private void LoadPrompt(string content)
    {
        UserService.CurrentChat.Settings.Prompt = ReplaceKeyworkds(content);
        StateHasChanged();
    }
}
