@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Formats.Png
@using SixLabors.ImageSharp.PixelFormats
@using SixLabors.ImageSharp.Processing

<div class="file-container ma-1">
    @if (File.FileType == FileType.Image)
    {
        <MudImage Src="@GetImageSrc()" Alt="@File.FileName" Style="height: 64px; width: 64px; border-radius:16px;" />
    }
    else
    {
        <MudPaper Style="border-radius: 16px; height: 64px; max-width: 100%; display: inline-block; background-color: var(--mud-palette-drawer-background);">
            <MudStack Row Spacing="2">
                <MudIcon Icon="@Icons.Material.Filled.AttachFile" Style="width: 32px; height: 32px;" Class="mt-4 ml-2 mr-0" />
                <MudStack Class="pt-2 pr-4" Spacing="0">
                    <MudText Typo="Typo.h6">@shortFilename</MudText>
                    <MudText Typo="Typo.h6">@(File.FileType == FileType.Text ? "Text document" :"Composite document")</MudText>
                </MudStack>
            </MudStack>
        </MudPaper>
    }
    @if (RemoveFunc is not null)
    {
        <div class="tooltip-container">
            <MudTooltip Text="Remove File" Placement="Placement.Top" Arrow>
                <button class="remove-button" @onclick="RemoveFile">X</button>
            </MudTooltip>
        </div>
    }
</div>

<style>
    .file-container {
        position: relative;
        display: inline-block;
    }

    .tooltip-container {
        position: absolute;
        top: -6px;
        right: -6px;
        display: none;
    }

    .remove-button {
        background-color: red;
        color: white;
        border: none;
        border-radius: 50%;
        width: 20px;
        height: 20px;
        text-align: center;
        cursor: pointer;
    }

    .file-container:hover .tooltip-container {
        display: block;
    }
</style>

@code {
    [Parameter] public ChatFile File { get; set; } = null!;
    [Parameter] public List<ChatFile>? FileList { get; set; }
    [Parameter] public Action<ChatFile>? RemoveFunc { get; set; }
    [Parameter] public bool RemoveTimestamp { get; set; } = true;

    [Inject] private IUserService UserService { get; set; } = null!;
    [Inject] private IUpdateService UpdateService { get; set; } = null!;

    private int maxFileNameLength = 25;

    private string shortFilename
    {
        get
        {
            string fileName = File.FileName;
            if (RemoveTimestamp)
            {
                int underscoreIndex = File.FileName.IndexOf('_');
                fileName = File.FileName.Substring(underscoreIndex + 1);
            }

            if (fileName.Length > maxFileNameLength)
            {
                int extensionIndex = fileName.LastIndexOf('.');
                if (extensionIndex == -1 || extensionIndex <= maxFileNameLength - 3)
                {
                    return fileName.Substring(0, maxFileNameLength - 3) + "...";
                }

                int charactersToShow = maxFileNameLength - 3 - (fileName.Length - extensionIndex);
                return fileName.Substring(0, charactersToShow) + "..." + fileName.Substring(extensionIndex);
            }
            else
            {
                return fileName;
            }
        }
    }

    protected override void OnParametersSet()
    {
        if (RemoveFunc is not null && FileList == null)
        {
            throw new ArgumentException("FileList must be provided when remove function is provided.");
        }
    }


    private string GetImageSrc()
    {
        try
        {
            string base64 = GenerateThumbnailBase64(File);
            return $"data:image/png;base64,{GenerateThumbnailBase64(File)}";
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            return "";
        }
    }

    public static string GenerateThumbnailBase64(ChatFile chatFile)
    {
        if (chatFile.Bytes == null)
        {
            throw new ArgumentException("Invalid image file.");
        }

        using (var ms = new MemoryStream(chatFile.Bytes))
        using (var originalImage = Image.Load<Rgba32>(ms))
        {
            var (cropX, cropY, cropSize) = GetCropParameters(originalImage);

            using (var croppedImage = originalImage.Clone(ctx => ctx.Crop(new Rectangle(cropX, cropY, cropSize, cropSize))
                                                                    .Resize(new ResizeOptions { Size = new SixLabors.ImageSharp.Size(64, 64), Mode = SixLabors.ImageSharp.Processing.ResizeMode.Max })))
            {
                return ConvertImageToBase64(croppedImage);
            }
        }
    }

    private static (int cropX, int cropY, int cropSize) GetCropParameters(Image<Rgba32> image)
    {
        int originalWidth = image.Width;
        int originalHeight = image.Height;
        int cropSize = Math.Min(originalWidth, originalHeight);
        int cropX = (originalWidth - cropSize) / 2;
        int cropY = (originalHeight - cropSize) / 2;
        return (cropX, cropY, cropSize);
    }

    private static string ConvertImageToBase64(Image<Rgba32> image)
    {
        using (var thumbnailStream = new MemoryStream())
        {
            image.Save(thumbnailStream, new PngEncoder());
            return Convert.ToBase64String(thumbnailStream.ToArray());
        }
    }

    public void RemoveFile()
    {
        // FileList!.Remove(File);
        // UpdateService.Update(UpdateType.Input);
        RemoveFunc?.Invoke(File);
    }

}
