@inherits LayoutComponentBase
<MudThemeProvider @bind-IsDarkMode="UserService.IsDarkMode" Theme="CustomMudTheme"/>
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>

    <PageTitle>ChatUiT</PageTitle>
    
    <MudAppBar Class="appbar-hover" Elevation="0" Dense Color="Color.Transparent" DisableGutters>

        <MudStack Row Style="width: 100%; height: 48px;" Class="appbar-background">


        @if (!drawerOpen)
        {
            <MudTooltip Text="Open sidebar" Placement="Placement.End" Arrow>
                <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowRight" OnClick="() => drawerOpen = true" Color="Color.Tertiary" />
            </MudTooltip>
            <MudTooltip Text="Start new chat" Arrow>
                <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="UserService.NewChat" Color="Color.Tertiary" />
            </MudTooltip>
            <MudDivider Vertical Style="height:32px" Class="pl-2" />

        }
        @if (UserService.CurrentChat.Messages.Count > 0)
        {

            @* Model selection *@
            <MudHidden Breakpoint="Breakpoint.Xs">
                <MudTooltip Text="Select model" Arrow>
                    <ModelSelect Class="appbar-item" />
                </MudTooltip>
            </MudHidden>
           
            @* Model config *@
            <MudTooltip Text="Configuration of thee model" Arrow>
                <div class="d-flex appbar-item">
                    <MudIconButton Icon="@Icons.Material.Filled.Settings" OnClick="OpenChatSettings" Color="Color.Tertiary" />
                </div>
            </MudTooltip>

            @* Save work item*@
            @if (!UserService.CurrentWorkItem.IsFavorite)
            {            
                <MudTooltip Text="@(CurrentWorkItemPersistant ? "Saved to cloud" : "Temporary chat")">
                    <MudSwitch @bind-Value="CurrentWorkItemPersistant" 
                        Disabled="UserService.CurrentWorkItem.IsFavorite" 
                        T="bool" 
                        Class="appbar-item"
                        Color="@(UserService.IsDarkMode ? Color.Dark : Color.Default)" 
                        UnCheckedColor="@(UserService.IsDarkMode ? Color.Dark : Color.Default)" 
                        ThumbIconColor="@(CurrentWorkItemPersistant ? Color.Success : Color.Error)" 
                        ThumbIcon="@(CurrentWorkItemPersistant ? Icons.Material.Filled.CloudDone : Icons.Material.Filled.CloudOff)" Size="Size.Large" />
                </MudTooltip>
            }
        }
        <MudSpacer />
        @* Branding? *@
        <MudSpacer />

        @* Render using markdown *@
        <MudTooltip Text="Select rendering mode" Arrow>
            <MudToggleIconButton Color="Color.Tertiary" ToggledColor="Color.Tertiary" Class="mr-2 appbar-item" Icon="@Icons.Material.Filled.TextSnippet" ToggledIcon="@Icons.Material.Filled.RemoveRedEye" @bind-Toggled="UserService.UseMarkdown" />
        </MudTooltip>

        @* Allow user to select how wide the chat area should be*@
        <MudHidden Breakpoint="Breakpoint.SmAndDown">
            <MudTooltip Text="Selct maximum width of the chat" Arrow>
                <MudMenu AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" Dense Class="pr-3 appbar-item">
                    <ActivatorContent>
                        <MudIconButton Icon="@Icons.Material.Filled.WidthNormal" Color="Color.Tertiary" />
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem OnClick="@(() => SetChatWidth(ChatWidth.Small))">
                            <div class="d-flex align-items-center" style="width: 150px;">
                                <div class="flex-grow-1 d-flex flex-column justify-content-center">
                                    <MudText Typo="Typo.h6" Class="m-0">Small</MudText>
                                    <MudText Typo="Typo.subtitle2" Class="m-0">800 pixels</MudText>
                                </div>
                                @if (UserService.ChatWidth == ChatWidth.Small)
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Check" Class="ms-auto" Style="margin-top: auto; margin-bottom: auto;" />
                                }
                            </div>
                        </MudMenuItem>
                        <MudDivider />
                        <MudMenuItem OnClick="@(() => SetChatWidth(ChatWidth.Medium))">
                            <div class="d-flex align-items-center" style="width: 150px;">
                                <div class="flex-grow-1 d-flex flex-column justify-content-center">
                                    <MudText Typo="Typo.h6" Class="m-0">Medium</MudText>
                                    <MudText Typo="Typo.subtitle2" Class="m-0">1200 pixels</MudText>
                                </div>
                                @if (UserService.ChatWidth == ChatWidth.Medium)
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Check" Class="ms-auto" Style="margin-top: auto; margin-bottom: auto;" />
                                }
                            </div>
                        </MudMenuItem>
                        <MudDivider />
                        <MudMenuItem OnClick="@(() => SetChatWidth(ChatWidth.Large))">
                            <div class="d-flex align-items-center" style="width: 150px;">
                                <div class="flex-grow-1 d-flex flex-column justify-content-center">
                                    <MudText Typo="Typo.h6" Class="m-0">Large</MudText>
                                    <MudText Typo="Typo.subtitle2" Class="m-0">1600 pixels</MudText>
                                </div>
                                @if (UserService.ChatWidth == ChatWidth.Large)
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Check" Class="ms-auto" Style="margin-top: auto; margin-bottom: auto;" />
                                }
                            </div>
                        </MudMenuItem>
                        <MudDivider />
                        <MudMenuItem OnClick="@(() => SetChatWidth(ChatWidth.Full))">
                            <div class="d-flex align-items-center" style="width: 150px;">
                                <div class="flex-grow-1 d-flex flex-column justify-content-center">
                                    <MudText Typo="Typo.h6" Class="m-0">Full</MudText>
                                    <MudText Typo="Typo.subtitle2" Class="m-0">Full screen width</MudText>
                                </div>
                                @if (UserService.ChatWidth == ChatWidth.Full)
                                {
                                    <MudIcon Icon="@Icons.Material.Filled.Check" Class="ms-auto" Style="margin-top: auto; margin-bottom: auto;" />
                                }
                            </div>
                        </MudMenuItem>
                    </ChildContent>
                </MudMenu>
            </MudTooltip>
        </MudHidden>


        @* Dark mode *@
        <MudTooltip Text="Toggle darkmode on and off" Arrow>
            <MudSwitch Class="appbar-item" @bind-Value="UserService.IsDarkMode" ThumbIconColor="Color.Tertiary" Color="Color.Dark" UnCheckedColor="Color.Default" ThumbIcon="@(UserService.IsDarkMode ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode)" Size="Size.Large" />
        </MudTooltip>

        @* User menu *@
        <MudTooltip Text="User menu" Arrow Placement="Placement.Start">
            <MudMenu AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" Class="pr-2 appbar-item">
                <ActivatorContent>
                    <MudButton Color="Color.Tertiary" Variant="Variant.Text" Style="width: 48px; height: 48px; min-width: 48px; min-height: 48px; padding: 0; display: flex; align-items: center; justify-content: center;">
                        <MudIcon Icon="@Icons.Material.Filled.AccountCircle" Size="Size.Large"/>
                    </MudButton>
                </ActivatorContent>
                <ChildContent>
                    <div class="pl-4 pb-2 pt-4">
                        <MudText Typo="Typo.body2">Logged in as:</MudText>
                        <MudText Typo="Typo.body1">@UserService.Name</MudText>
                    </div>
                    <MudDivider />
                    <MudMenuItem OnClick="OpenUserSettings" Disabled>
                        <MudStack Row Style="width:150px">
                            <MudIcon Icon="@Icons.Material.Filled.Settings" /> 
                            Preferences 
                        </MudStack>
                    </MudMenuItem>
                    <MudDivider />
                    <MudMenuItem OnClick="Logout" Disabled>
                        <MudStack Row Style="width:150px">
                            <MudIcon Icon="@Icons.Material.Filled.ExitToApp" /> 
                            Logout
                        </MudStack>
                    </MudMenuItem>
                </ChildContent>
            </MudMenu>

        </MudTooltip>
        </MudStack>
    </MudAppBar>


    <MudDrawer @bind-Open="drawerOpen" Fixed Elevation="0">
        <NavMenu OnClose="CloseDrawer" />
    </MudDrawer>

    @* Main Content *@
    <MudMainContent Style="padding-top: 0px">
        <div style="
            display: flex;
            flex-direction: column;
            height: 100vh;
            overflow: auto;
            ">
            @Body
        </div>
    </MudMainContent>

    
</MudLayout>

<style>
    .mud-list.mud-list-padding {
        padding-top: 0px;
        padding-bottom: 0px;
    }
    .appbar-item {
        opacity: 0;
        transition: opacity 0.3s ease-in-out;
    }

    .appbar-hover:hover .appbar-item {
        opacity: 1;
    }

    .appbar-background {
        background-color: rgba(0, 0, 0, 0);
        transition: background-color 0.3s ease-in-out;
    }

    .appbar-hover:hover .appbar-background{
        background-color: var(--mud-palette-drawer-background);
    }

</style>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    [Inject] private IUserService UserService { get; set; } = null!;
    [Inject] private IDialogService DialogService { get; set; } = null!;
    [Inject] private IAuthUserService AuthUserService { get; set; } = null!;
    [Inject] private IConfiguration Configuration { get; set; } = null!;
    [Inject] private IJSRuntime JS { get; set; } = null!;
    [Inject] private NavigationManager Nav { get; set; } = null!;
    [Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = null!;

    private string username = "";

    private bool CurrentWorkItemPersistant
    {
        get => UserService.CurrentWorkItem.Persistant;
        set
        {
            UserService.SetSaveHistory(UserService.CurrentWorkItem, value);
        }
    }


    private MudTheme _theme = new();
    // private bool _isHistoryEnabled = true;
    private bool drawerOpen = true;

    protected override void OnInitialized()
    {
        UserService.OnUpdate += UpdateView;
        base.OnInitialized();
        GetUsername();
    }

    public void Dispose()
    {
        UserService.OnUpdate -= UpdateView;
    }

    public void UpdateView()
    {
        StateHasChanged();
    }

    private void CloseDrawer()
    {
        drawerOpen = false;
    }

    private void OpenChatSettings()
    {
        DialogOptions chatSettingsOptions = new DialogOptions
        {
            MaxWidth = MaxWidth.ExtraExtraLarge,
            NoHeader = false,
            CloseButton = true,
            FullWidth = false,
            ClassBackground = "bg-transparent",
        };
        DialogService.Show<ChatSettingsView>(title: "Chat settings", options: chatSettingsOptions);
    }

    private async void GetUsername()
    {
        var result = await AuthUserService.GetUsername();
        if (result != null)
        {
            username = result;
        }
        else
        {
            username = "";
        }
        StateHasChanged();
    }


    private void SetChatWidth(ChatWidth width)
    {
        Console.WriteLine($"Setting chat width to {width}");
        UserService.ChatWidth = width;
    }

    private void OpenUserSettings()
    {
        // TODO: Implement
    }

    private async void Logout()
    {
        await Task.Delay(10);

        Nav.NavigateTo("/MicrosoftIdentity/Account/SignOut");
    }

    private void ChangeDarkmode(bool value)
    {
        UserService.IsDarkMode = value;
        UserService.RaiseUpdate();
    }


    public MudTheme CustomMudTheme = new MudTheme
    {
        Typography = new Typography
        {
            Default = new Default
            {
                FontFamily = ["Roboto", "sans-serif"],
                FontSize = "0.875rem",
            },
            H1 = new H1 { FontSize = "2rem" }, // Default is 6rem
            H2 = new H2 { FontSize = "1.75rem" }, // Default is 3.75rem
            H3 = new H3 { FontSize = "1.5rem" }, // Default is 3rem
            H4 = new H4 { FontSize = "1.25rem" }, // Default is 2.125rem
            H5 = new H5 { FontSize = "1rem" }, // Default is 1.5rem
            H6 = new H6 { FontSize = "0.875rem" }, // Default is 1.25rem
            Body1 = new Body1 { FontSize = "0.875rem" }, // Default is 1rem
            Body2 = new Body2 { FontSize = "0.75rem" }, // Default is 0.875rem
            Button = new Button { FontSize = "0.875rem" }, // Default is 0.875rem
            Subtitle1 = new Subtitle1 { FontSize = "1rem" }, // Default is 1rem
            Subtitle2 = new Subtitle2 { FontSize = "0.875rem" }, // Default is 0.875rem
            Caption = new Caption { FontSize = "0.75rem" }, // Default is 0.75rem
            Overline = new Overline { FontSize = "0.75rem" }, // Default is 0.75rem

        },
        Palette = new PaletteLight
        {
            Surface = "f0f0f0",
            Primary = "#2a688d",
            // DrawerBackground = "#f0f0f0",
                DrawerBackground = "#e1eeff",
            DrawerText = "#ffffff",
            ChipDefaultHover = "rgba(0, 0, 0, 0.05)",
            ChipDefault = "rgba(0,0,0, 0)",
                BackgroundGrey = "rgba(0, 0, 0, 0.1)",
            Tertiary = "#373740",
            TertiaryContrastText = "#ffffff",
        },
        PaletteDark = new PaletteDark
        {
            //Info = "#6fa7d4" //"#2196f3",
                Background = "#212121",
                Primary = "#2a688d",
                DrawerBackground = "#171717",
                // DrawerBackground = "#00061b",
                // BackgroundGrey = "#2f2f2f",
                BackgroundGrey = "rgba(255, 255, 255, 0.1)",
                ChipDefaultHover = "rgba(255, 255, 255, 0.05)",
                ChipDefault = "rgba(255,255,255, 0)",
                DrawerIcon = "#000000",
                Tertiary = "#b3b3b3",
                
        },
        LayoutProperties = new LayoutProperties
        {
            
        },
        

    };
}