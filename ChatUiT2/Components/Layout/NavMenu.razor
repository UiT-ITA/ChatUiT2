<div style="display:flex; flex-direction:column;height:100%; overflow-x:hidden; width:100%;">
    <div>

        <div style="display: flex; align-items: center; justify-content:space-between;" class="pt-0">
            <MudTooltip Text="Hide sidebar" Arrow Placement="Placement.End">
                <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowLeft" OnClick="CloseDrawer" Color="Color.Tertiary"/>
            </MudTooltip>
            @if (UserService.CurrentWorkItem == null || UserService.CurrentWorkItem.Type == WorkItemType.Chat)
            {
                <MudTooltip Text="Create new chat" Arrow>
                    <MudButton Icon="@Icons.Material.Filled.Add" Variant="Variant.Text" Class="ml-2 mr-1" OnClick="UserService.NewChat" FullWidth Style="justify-content:flex-end; width: 180px"  Color="Color.Tertiary">
                        <MudText Typo="Typo.h5">New chat</MudText>
                        <MudIcon Icon="@Icons.Material.Filled.Add" Class="ml-1"/>
                    </MudButton>
                </MudTooltip>
            }
            
        </div>
        <MudDivider Class="mb-2"/>
    </div>

    <div class="flex-grow-1">
        @if (UserService.Loading)
        {
            <MudText Typo="Typo.h6" Class="text-center pl-4" >Loading...</MudText>
        }
        else
        {
            foreach (var workItem in UserService.GetWorkItems())
            {
                <WorkItemView workItem="workItem" />
            }
        }
    </div>


    @* Bottom  *@
    <div>
        <MudDivider/>

        @* Download current conversation *@
        <MudButton FullWidth Class="pl-2 pt-4" Style="display:flex; justify-content:flex-start" OnClick="DownloadConversation" Color="Color.Tertiary">
            <MudStack Row>
                <MudIcon Icon="@Icons.Material.Filled.Download" Size="Size.Medium" Class="mt-0" Style="height:28px; width: 28px;" />
                <MudText Typo="Typo.h5" Class="">Download chat</MudText>
            </MudStack>
        </MudButton>

        @* Delete all user data *@
        <MudButton FullWidth Class="pl-2 pt-2 pb-2" Style="display:flex; justify-content:flex-start" OnClick="DeleteAll" Color="Color.Tertiary">
            <MudStack Row>
                <MudIcon Icon="@Icons.Material.Filled.DeleteForever" Size="Size.Medium" Class="mt-0" Style="height:28px; width: 28px;" />
                <MudText Typo="Typo.h5" Class="">Delete all data</MudText>
            </MudStack>
        </MudButton>
    </div>
</div>



    




@code {
    [Inject] private IUserService UserService { get; set; } = null!;
    [Inject] private NavigationManager Nav { get; set; } = null!;
    [Inject] private IDialogService DialogService { get; set; } = null!;
    [Inject] private IJSRuntime JS { get; set; } = null!;

    [Parameter] public EventCallback OnClose { get; set; }


    private void CloseDrawer()
    {
        OnClose.InvokeAsync();
    }

    private async Task DownloadConversation()
    {
        var exportChat = new
        {
            Name = UserService.CurrentChat.Name,
            Messages = UserService.CurrentChat.Messages.Select(m => new
            {
                Role = m.Role.ToString(),
                Content = m.Content,
                Created = m.Created
            }).ToList()
        };

        var options = new System.Text.Json.JsonSerializerOptions
        {
            WriteIndented = true,
                Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping
        };

        var chatJson = System.Text.Json.JsonSerializer.Serialize(exportChat, options);
        var bytes = System.Text.Encoding.UTF8.GetBytes(chatJson);
        var base64 = Convert.ToBase64String(bytes);
        var fileName = UserService.CurrentChat.Name + ".json";

        await JS.InvokeVoidAsync("downloadFileFromBase64", fileName, base64);
    }

    private async Task DeleteAll()
    {
        // Display confirmation dialog
        var result = await DialogService.ShowMessageBox("Delete all userdata? This is not reversable!", "Are you sure?", yesText: "Yes", noText: "No");
        if (result != null && result == true)
        {
            await UserService.DeleteUser();
        }
    }
}

