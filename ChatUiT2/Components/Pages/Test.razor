@page "/test"
@using Azure.AI.OpenAI
@using ChatUiT2.Services
@using MongoDB.Bson.Serialization
@using OpenAI.Chat

<div style="height: 48px;" />

<MudText Typo="Typo.h6">Testing purposes ONLY!</MudText>

<MudButton StartIcon="@Icons.Material.Filled.Science" FullWidth OnClick="Testing">Testing</MudButton>
<MudButton StartIcon="@Icons.Material.Filled.Science" FullWidth OnClick="TestAI">TestAI</MudButton>

<span>@debug_text</span>

@code {
    [Inject] private TestService testService { get; set; } = null!;
    // [Inject] private AuthenticationStateProvider Auth { get; set; } = null!;

    string? debug_text = "Debug text";

    public async Task Testing()
    {
        await TestAI();

        StateHasChanged();
    }

    public async Task TestAI()
    {
        Model model = testService._configService.GetModel("GPT-4o");
        Console.WriteLine(model.Name);
        ModelEndpoint endpoint = testService._configService.GetEndpoint(model.Deployment);






        var client = new AzureOpenAIClient(new Uri(endpoint.Url), new Azure.AzureKeyCredential(endpoint.Key)).GetChatClient(model.DeploymentName);

        var options = new ChatCompletionOptions()
                {
                MaxTokens = Math.Min(model.MaxTokens, 4096),
                Temperature = 0.2f
        };

        int availableTokens = model.MaxContext - (int)options.MaxTokens;
        List<OpenAI.Chat.ChatMessage> messages = new();

        messages.Add(new SystemChatMessage("You are a helpful ai assistant, respond using markdown."));

        var contentPartText = OpenAI.Chat.ChatMessageContentPart.CreateTextMessageContentPart("What is in this image?");
        var contentPartImage = OpenAI.Chat.ChatMessageContentPart.CreateImageMessageContentPart(new Uri("https://upload.wikimedia.org/wikipedia/commons/3/3e/Emperor_Penguins_(15885611526).jpg"));

        var UserChatMessage = new UserChatMessage([contentPartText, contentPartImage]);

        messages.Add(UserChatMessage);



        var response = client.CompleteChatStreamingAsync(messages, options);

        string content = "";
        await foreach (var chatUpdate in response)
        {
            foreach (var update in chatUpdate.ContentUpdate)
                content += update.Text;

        }

        debug_text = content;
        StateHasChanged();
    }
   
}
