@page "/test"
@using Azure.AI.OpenAI
@using ChatUiT2.Services
@using MongoDB.Bson.Serialization
@using OpenAI.Chat

<div style="height: 48px;" />

<MudText Typo="Typo.h6">Testing purposes ONLY!</MudText>

<MudButton StartIcon="@Icons.Material.Filled.Science" FullWidth OnClick="Testing">Testing</MudButton>
<MudButton StartIcon="@Icons.Material.Filled.Science" FullWidth OnClick="TestAI">TestAI</MudButton>
<MudButton StartIcon="@Icons.Material.Filled.Science" FullWidth OnClick="TestStorage">Test storage</MudButton>
<MudButton StartIcon="@Icons.Material.Filled.Science" FullWidth OnClick="ToggleFileUpload">@("Turn file upload " + (userService.EnableFileUpload ? "off" : "on"))</MudButton>



<span>@debug_text</span>

@code {
    [Inject] private TestService testService { get; set; } = null!;
    [Inject] private IStorageService storageService { get; set; } = null!;
    [Inject] private IUserService userService { get; set; } = null!;
    [Inject] private ILogger<Test> logger { get; set; } = null!;
    // [Inject] private AuthenticationStateProvider Auth { get; set; } = null!;

    string? debug_text = "Debug text";

    public async Task Testing()
    {
        await TestAI();

        StateHasChanged();
    }

    public async Task TestAI()
    {
        await Task.Delay(1);
        // Model model = testService._configService.GetModel("GPT-4o");
        // Console.WriteLine(model.Name);
        // ModelEndpoint endpoint = testService._configService.GetEndpoint(model.Deployment);

        // var client = new AzureOpenAIClient(new Uri(endpoint.Url), new Azure.AzureKeyCredential(endpoint.Key)).GetChatClient(model.DeploymentName);

        // var options = new ChatCompletionOptions()
        //         {
        //         MaxTokens = Math.Min(model.MaxTokens, 4096),
        //         Temperature = 0.2f
        // };

        // int availableTokens = model.MaxContext - (int)options.MaxTokens;
        // List<OpenAI.Chat.ChatMessage> messages = new();

        // messages.Add(new SystemChatMessage("You are a helpful ai assistant, respond using markdown."));

        // var contentPartText = OpenAI.Chat.ChatMessageContentPart.CreateTextMessageContentPart("What is in this image?");
        // var contentPartImage = OpenAI.Chat.ChatMessageContentPart.CreateImageMessageContentPart(new Uri("https://upload.wikimedia.org/wikipedia/commons/3/3e/Emperor_Penguins_(15885611526).jpg"));

        // var UserChatMessage = new UserChatMessage([contentPartText, contentPartImage]);

        // messages.Add(UserChatMessage);



        // var response = client.CompleteChatStreamingAsync(messages, options);

        // string content = "";
        // await foreach (var chatUpdate in response)
        // {
        //     foreach (var update in chatUpdate.ContentUpdate)
        //         content += update.Text;

        // }

        // debug_text = content;
        // StateHasChanged();
    }

    public async Task TestStorage()
    {
        await Task.Delay(1);
        // // Define test data
        // string username = "testuser";
        // string filename = "test.txt";
        // byte[] fileContent = System.Text.Encoding.UTF8.GetBytes("Hello world!\n");

        // // Upload the file
        // await storageService.UploadFile(username, filename, fileContent);
        // Console.WriteLine("File uploaded successfully.");

        // // Download the file
        // byte[]? downloadedFileContent = await storageService.GetFileBytes(username, filename);
        // if (downloadedFileContent != null)
        // {
        //     string downloadedText = System.Text.Encoding.UTF8.GetString(downloadedFileContent);
        //     Console.WriteLine("Downloaded file content: " + downloadedText);
        // }
        // else
        // {
        //     Console.WriteLine("Failed to download file.");
        // }
    }

    public void ToggleFileUpload()
    {
        userService.EnableFileUpload = !userService.EnableFileUpload;
    }

    public void LogSomething()
    {
        // testService.LogSomething();

    }

}
