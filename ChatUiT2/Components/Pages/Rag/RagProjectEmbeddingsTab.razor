@using ChatUiT2.Interfaces
@using ChatUiT2.Models.RagProject;
@using ChatUiT2.Models.RabbitMq
@attribute [Authorize(Roles = "Admin,RagAdmin")]

<MudText>
    Her er informasjon om alle embeddings som er lagt inn i embeddings collection for dette RAG prosjektet.
    Du kan bruke denne siden til å redigere texter eller slette tekster som ikke er aktuell.
    <br /><br />
    @if (RagProject != null)
    {
        <MudText>
            Database: @(RagProject.Configuration?.DbName)
        </MudText>
        <MudText>
            Collection: @(RagProject.Configuration?.EmbeddingCollectioName)
        </MudText>
        @if (countsIsLoading)
        {
            <MudProgressCircular Color="Color.Primary" Size="Size.Small" Indeterminate="true" />
        }
        else
        {
            <MudText>
                Antall items uten embeddings: @numberOfItemsMissingEmbeddings
            </MudText>
            <MudText>
                Antall items merket some processing (venter i kø): @nrOfContentItemsInQueue
                <MudTooltip Text="Hent ny status fra database">
                    <MudIconButton OnClick="RefreshCounts" Icon="@Icons.Material.Filled.Refresh"></MudIconButton>
                </MudTooltip>
            </MudText>
        }
    }
</MudText>

<MudExpansionPanels>
    <MudExpansionPanel Text="Admin tasks" MaxHeight="450" Expanded="false">
        <MudGrid>
            <MudItem xs="12">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => CreateEmbeddingsForAllSourceItems()" Class="mt-4">Create embeddings from all source items</MudButton>
            </MudItem>
            <MudItem xs="12">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => CancelCreateEmbeddingsForAllSourceItems()" Class="mt-4">Cancel all embedding generation in queue</MudButton>
            </MudItem>
            <MudItem xs="12">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="() => DeleteAllEmbeddingsForAllSourceItems()" Class="mt-4">Delete all embeddings</MudButton>
            </MudItem>

        </MudGrid>
    </MudExpansionPanel>
</MudExpansionPanels>

<MudPaper Elevation="3" Class="mt-4 pa-4">
    <MudText Typo="Typo.h6">Filtere</MudText>
    <MudGrid Class="mt-1">
        <MudItem xs="12">
            <MudTextField T="string"
                          @bind-Value="sourceIdSearch"
                          Immediate="true"
                          Placeholder="Source id"
                          Adornment="Adornment.Start"
                          IconSize="Size.Medium"
                          Class="mt-0"
                          OnKeyDown="CheckIfEnterPressed">
            </MudTextField>
        </MudItem>
        <MudItem xs="2">
            <MudIconButton Icon="@Icons.Material.Filled.Search" OnClick="() => DoSearch()"></MudIconButton>
        </MudItem>
        <MudItem xs="10">
        </MudItem>
    </MudGrid>
</MudPaper>

<MudTable ServerData="ServerReload"
          Class="mt-4"
          T="RagTextEmbeddingViewItem"
          Dense="false"
          Hover="true"
          Bordered="true"
          Striped="false"
          SortLabel="Sort By"
          AllowUnsorted="false"
          Loading="isLoading"
          RowsPerPage="50"
          @bind-SelectedItem="selectedItem1"
          CommitEditTooltip="Commit Edit"
          OnCommitEditClick="CommitEditAsync"
          RowEditPreview="BackupItem"
          RowEditCancel="ResetItemToOriginalValues"
          CanCancelEdit="true"
          @ref="table">
    <ToolBarContent>
        <MudText Typo="Typo.h6"></MudText>
        <MudSpacer />
    </ToolBarContent>
    <HeaderContent>
        <MudTh></MudTh>
        <MudTh><MudTableSortLabel T="RagTextEmbeddingViewItem" SortBy="new Func<RagTextEmbeddingViewItem, object>(x=>x.RagTextEmbedding != null ? x.RagTextEmbedding!.Originaltext : string.Empty)">Text</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="RagTextEmbeddingViewItem" SortBy="new Func<RagTextEmbeddingViewItem, object>(x=>x.RagTextEmbedding != null ? x.RagTextEmbedding!.ModelProvider : string.Empty)">Provider</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="RagTextEmbeddingViewItem" SortBy="new Func<RagTextEmbeddingViewItem, object>(x=>x.RagTextEmbedding != null ? x.RagTextEmbedding!.Model : string.Empty)">Model</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="RagTextEmbeddingViewItem" SortBy="new Func<RagTextEmbeddingViewItem, object>(x=>x.RagTextEmbedding!.TextType!)">Type</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="RagTextEmbeddingViewItem" SortBy="new Func<RagTextEmbeddingViewItem, object>(x=>x.RagTextEmbedding != null ? x.RagTextEmbedding!.ContentItem!.SourceSystemId : string.Empty)">Source system id</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel T="RagTextEmbeddingViewItem" SortBy="new Func<RagTextEmbeddingViewItem, object>(x=>x.RagTextEmbedding != null ? x.RagTextEmbedding!.ContentItem!.SourceSystemAltId : string.Empty)">Source system alt id</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Outlined.Delete" Class="pa-0" OnClick="@(async () => await DeleteEmbedding(context))" />
        </MudTd>
        <MudTd>@context.RagTextEmbedding?.Originaltext</MudTd>
        <MudTd>@context.RagTextEmbedding?.ModelProvider</MudTd>
        <MudTd>@context.RagTextEmbedding?.Model</MudTd>
        <MudTd>@context.RagTextEmbedding?.TextType</MudTd>
        <MudTd>@context.ContentItem?.SourceSystemId</MudTd>
        <MudTd>@context.ContentItem?.SourceSystemAltId</MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd>
        </MudTd>
        <MudTextField T="string"
                      @bind-Value="context.RagTextEmbedding!.Originaltext"
                      Immediate="true"
                      Placeholder="Text som skal embeddes"
                      Adornment="Adornment.Start"
                      IconSize="Size.Medium"
                      Class="mt-0">
        </MudTextField>
        <MudTd>@context.RagTextEmbedding?.ModelProvider</MudTd>
        <MudTd>@context.RagTextEmbedding?.Model</MudTd>
        <MudTd>@context.ContentItem?.SourceSystemId</MudTd>
        <MudTd>@context.ContentItem?.SourceSystemAltId</MudTd>
    </RowEditingTemplate>
    <PagerContent>
        <MudTablePager HorizontalAlignment="HorizontalAlignment.Center" />
    </PagerContent>

</MudTable>

@code {
    [Inject] IRagDatabaseService ragTopdeskService { get; set; } = null!;
    [Inject] IRagGeneratorService ragGeneratorService { get; set; } = null!;
    [Inject] ISnackbar Snackbar { get; set; } = null!;
    [Inject] IConfiguration configuration { get; set; } = null!;
    [Inject] IRabbitMqService rabbitMqService { get; set; } = null!;
    [Inject] IUsernameService usernameService { get; set; } = null!;

    [Parameter]
    public RagProject? RagProject { get; set; }

    private MudTable<RagTextEmbeddingViewItem>? table;
    private RagTextEmbeddingViewItem? selectedItem1 = null;
    private RagTextEmbeddingViewItem? elementBeforeEdit;
    private string sourceIdSearch = string.Empty;
    private bool isLoading = true;
    private bool countsIsLoading = true;
    private int numberOfItemsMissingEmbeddings = 0;
    private long nrOfContentItemsInQueue = 0;
    private IEnumerable<EmbeddingEvent> embeddingEvents = new List<EmbeddingEvent>();
    private bool tableIsLoading = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await RefreshCounts();
            }
            catch (Exception e)
            {
                Snackbar.Add($"Noe feilet ved lasting av data fra RAG database {e.Message}", Severity.Error, config => { });
            }
        }
    }

    private async Task SaveEmbedding(RagTextEmbeddingViewItem item, bool reloadData = true)
    {
        try
        {
            if(RagProject == null)
            {
                Snackbar.Add($"Fant ikke rag prosjekt", Severity.Error, config => { });
                return;
            }
            if(item.RagTextEmbedding == null)
            {
                Snackbar.Add($"Embedding er null", Severity.Error, config => { });
                return;
            }
            await ragTopdeskService.SaveRagEmbedding(RagProject, item.RagTextEmbedding);
            if (reloadData && table != null)
            {
                await table.ReloadServerData();
            }
        }
        catch (Exception e)
        {
            Snackbar.Add($"Noe feilet ved lagring av embedding {e.Message}", Severity.Error, config => { });
        }
    }


    private void BackupItem(object elementObj)
    {
        RagTextEmbeddingViewItem element = (RagTextEmbeddingViewItem)elementObj;
        element.IsEditing = true;
        RagTextEmbeddingViewItem ragTextEmbeddingViewBackup = new();
        RagTextEmbedding? ragTextEmbeddingBackup = element.RagTextEmbedding;
        if(ragTextEmbeddingBackup != null)
        {
            ragTextEmbeddingBackup.Originaltext = element.RagTextEmbedding!.Originaltext!;
        }
        elementBeforeEdit = ragTextEmbeddingViewBackup;
        StateHasChanged();
    }


    private async Task CommitEditAsync(MouseEventArgs args)
    {
        try
        {
            if(selectedItem1?.RagTextEmbedding?.Embedding != null)
            {
                selectedItem1.RagTextEmbedding.Embedding = (await ragGeneratorService.GetEmbeddingForText(selectedItem1.RagTextEmbedding.Originaltext, await usernameService.GetUsername())).ToFloats().ToArray();
                await SaveEmbedding(selectedItem1);
            }
            else
            {
                Snackbar.Add($"Embedding er null", Severity.Error, config => { });
            }
        }
        catch (Exception e)
        {
            Snackbar.Add($"Noe feilet ved lagring av embedding {e.Message}", Severity.Error, config => { });
        }
    }

    private void ResetItemToOriginalValues(object elementObj)
    {
        RagTextEmbeddingViewItem element = (RagTextEmbeddingViewItem)elementObj;
        if(element.RagTextEmbedding == null)
        {
            Snackbar.Add($"Embedding er null", Severity.Error, config => { });
            return;
        }
        if(elementBeforeEdit?.RagTextEmbedding == null)
        {
            Snackbar.Add($"Embedding er null", Severity.Error, config => { });
            return;
        }
        element.RagTextEmbedding.Originaltext = elementBeforeEdit.RagTextEmbedding.Originaltext;
    }

    private async Task DeleteEmbedding(RagTextEmbeddingViewItem item)
    {
        try
        {
            if (RagProject == null)
            {
                Snackbar.Add($"Fant ikke rag prosjekt", Severity.Error, config => { });
                return;
            }
            if (item.RagTextEmbedding == null)
            {
                Snackbar.Add($"Embedding er null", Severity.Error, config => { });
                return;
            }
            await ragTopdeskService.DeleteRagEmbedding(RagProject, item.RagTextEmbedding);
            Snackbar.Add($"Embedding slettet", Severity.Success, config => { });
            await DoSearch();
            StateHasChanged();
        }
        catch (Exception e)
        {
            Snackbar.Add($"Noe feilet ved sletting av embedding {e.Message}", Severity.Error, config => { });
        }
    }

    private async Task CreateEmbeddingsForAllSourceItems()
    {

        try
        {
            if (RagProject?.Id != null)
            {
                RagMqMessage message = new()
                {
                    Operation = RagMqMessageOperations.ScanForItemsMissingEmbeddings,
                    RagProjectId = RagProject.Id,
                    SourceItemMongoDbId = string.Empty,
                    EmbeddingType = null
                };
                await rabbitMqService.SendRagMessage(message);
            }
            else
            {
                Snackbar.Add($"Fant ikke rag prosjekt", Severity.Error, config => { });
            }
        }
        catch (Exception e)
        {
            Snackbar.Add($"Noe feilet ved sending av melding om lag embeddings for alle items, ragProjectId {RagProject?.Id} {e.Message}", Severity.Error, config => { });
        }
        await DoSearch();
        StateHasChanged();
    }

    private async Task CancelCreateEmbeddingsForAllSourceItems()
    {
        try
        {
            if(RagProject?.Id != null)
            {
                RagMqMessage message = new()
                {
                    Operation = RagMqMessageOperations.CancelAllEmbeddingsProcessing,
                    RagProjectId = RagProject.Id,
                    SourceItemMongoDbId = string.Empty
                };
                await rabbitMqService.SendRagMessage(message);
            }
            else
            {
                Snackbar.Add($"Fant ikke rag prosjekt", Severity.Error, config => { });
            }
        }
        catch (Exception e)
        {
            Snackbar.Add($"Noe feilet ved sending av melding om lag embeddings for alle items, ragProjectId {RagProject?.Id} {e.Message}", Severity.Error, config => { });
        }
        await DoSearch();
        StateHasChanged();
    }

    private void CheckIfEnterPressed(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            // Call your function here
            DoSearch();
        }
    }

    private async Task DoSearch()
    {
        try
        {
            await table.ReloadServerData();
        }
        catch (Exception e)
        {
            Snackbar.Add($"Noe feilet ved søk {e.Message}", Severity.Error, config => { });
        }
        finally
        {
            isLoading = false;
        }
        StateHasChanged();
    }

    private async Task RefreshCounts()
    {
        countsIsLoading = true;
        await RefreshEmbeddingEvents();
        await RefreshItemsWithoutEmbeddingsCount();
        RefreshProcessingCount();
        countsIsLoading = false;
        StateHasChanged();
    }

    private void RefreshProcessingCount()
    {
        nrOfContentItemsInQueue = embeddingEvents.Count();
    }

    private async Task RefreshItemsWithoutEmbeddingsCount()
    {
        if(RagProject == null)
        {
            return;
        }
        numberOfItemsMissingEmbeddings = await ragTopdeskService.GetNrOfContentItemsWithNoEmbeddings(RagProject);
    }

    private async Task RefreshEmbeddingEvents()
    {
        if (RagProject == null)
        {
            return;
        }
        embeddingEvents = await ragTopdeskService.GetEmbeddingEventsByProjectId(RagProject);
    }

    private async Task DeleteAllEmbeddingsForAllSourceItems()
    {
        try
        {
            if (RagProject != null)
            {
                await ragTopdeskService.DeleteEmbeddingsForProject(RagProject);
                await DoSearch();
                DoSearch();
                Snackbar.Add($"Alle embeddings for prosjekt er slettet", Severity.Success, config => { });
            }
            else
            {
                Snackbar.Add($"Fant ikke rag prosjekt", Severity.Error, config => { });
            }
        }
        catch (Exception e)
        {
            Snackbar.Add($"Noe feilet ved sletting {e.Message}", Severity.Error, config => { });
        }
    }

    private async Task<TableData<RagTextEmbeddingViewItem>> ServerReload(TableState state, CancellationToken cancellationToken)
    {
        tableIsLoading = true;
        
        var dbResult = await ragTopdeskService.SearchEmbeddingsByProject(RagProject, state.Page * state.PageSize, state.PageSize, sourceIdSearch);

        var totalItems = dbResult.Count();

        List<RagTextEmbeddingViewItem> tableData = new();

        foreach (var item in dbResult)
        {
            tableData.Add(new()
            {
                RagTextEmbedding = item                
            });
        }

        await Task.Delay(1000);
        tableIsLoading = false;

        return new TableData<RagTextEmbeddingViewItem>() { TotalItems = totalItems, Items = tableData };

    }
}