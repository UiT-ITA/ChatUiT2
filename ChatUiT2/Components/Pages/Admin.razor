@page "/admin"
@using ChatUiT2.Services

<div style="height:48px;">
    <MudText Typo="Typo.h4" Class="pt-3 pl-3">No idea what this will be used for, but it's here.</MudText>
</div>

@if (!isAdmin)
{
    <p>You are not authorized to view this page.</p>
}
else
{

    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" >
        <MudTabPanel Text="Users">
            @if (users.Count == 0)
            {
                <MudText>Loading...</MudText>
            }
            @foreach (var user in users)
            {
                <MudStack Row >
                    <MudText>@user.Username</MudText>
                </MudStack>
            }
        </MudTabPanel>
        <MudTabPanel Text="logging">

            <MudButton StartIcon="@Icons.Material.Filled.Note" FullWidth OnClick="LogSomething">Test logging</MudButton>
        </MudTabPanel>
        <MudTabPanel Text="Tab Three">
            <MudText>Content Three</MudText>
        </MudTabPanel>
        <MudTabPanel Text="Tab Disabled" Disabled="true">
            <MudText>Content Disabled</MudText>
        </MudTabPanel>
    </MudTabs>

}

@code {
    [Inject] private IAuthUserService Auth { get; set; } = null!;
    [Inject] private IUserService UserService { get; set; } = null!;
    [Inject] private IUpdateService UpdateService { get; set; } = null!;
    [Inject] private NavigationManager Nav { get; set; } = null!;
    [Inject] private AdminService AdminService { get; set; } = null!;
    [Inject] private ILogger<Admin> Logger { get; set; } = null!;

    private bool isAdmin;

    List<User> users = new List<User>();




    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isAdmin = await Auth.TestInRole(["Admin"]);
            if (!isAdmin)
            {
                Nav.NavigateTo("/");
            }
            StateHasChanged();
            //_ = LoadUsers();
        }
    }


    private async Task LoadUsers()
    {
        users = await AdminService.GetUsers();
        Console.WriteLine("Got users");
        StateHasChanged();
    }


    public void LogSomething()
    {
        var testVaule = "noe";
        if (Logger == null)
        {
            Console.WriteLine("Logger is null");
        }
        else
        {
            Logger.LogInformation("Type: {LogType} User: {User} Input: {Input} Output {Output}", "ChatRequest", "otv001-cloud", 4096, 79874);
            //Logger.LogInformation("User {user} chat request. Input: {input}. Output: {output}", "otv001", 4096, 79874);
            //Logger.LogInformation("test");
            Logger.LogWarning("This is working? {test}", testVaule);
            Console.WriteLine("Logged");
        }

    }
    
}
