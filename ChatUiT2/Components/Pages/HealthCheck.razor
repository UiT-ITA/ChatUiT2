@page "/healthcheck"
@attribute [Authorize(Roles = "Admin,SuperUser")]
@using System.Text.RegularExpressions
@using OpenAI.Embeddings
@using ChatUiT2.Interfaces
@using ChatUiT2.Services

<MudText Typo="Typo.h5">Applikasjonstilstand</MudText>

<MudPaper Class="mt-4 pa-4" Elevation="3">
    Tester forbindelse til eksterne dependencies.
</MudPaper>


<MudPaper Class="mt-4 pa-4" Elevation="3">
    <MudText Typo="Typo.h6">Rag database status</MudText>
    <MudText>Connection string: @connStrForDisplayRag</MudText>
    @if (ragDbStatusLoading)
    {
        <MudText>Testing connection</MudText>
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
    }
    else
    {
        <MudText Class="mt-4">@ragDbError</MudText>
        @if (string.IsNullOrEmpty(ragDbError) == true)
        {
            <MudText>Rag projects document count: @ragDbProjectsCount</MudText>
        }
    }
</MudPaper>

<MudPaper Class="mt-4 pa-4" Elevation="3">
    <MudText Typo="Typo.h6">Chat database status</MudText>
    <MudText>Connection string: @connStrForDisplayChat</MudText>
    @if (chatDbStatusLoading)
    {
        <MudText>Testing connection</MudText>
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
    }
    else
    {
        <MudText Typo="Typo.h6">Chat database status</MudText>
        <MudText Class="mt-4">@chatDbError</MudText>
        @if (string.IsNullOrEmpty(chatDbError) == true)
        {
            <MudText>Chat users document count: @chatDbUsersCount</MudText>
        }
    }
</MudPaper>

<MudPaper Class="mt-4 pa-4" Elevation="3">
    <MudText Typo="Typo.h6">OpenAi chat default model status</MudText>
    <MudText>DeploymentName: @defaultModel?.DeploymentName</MudText>
    <MudText>Name: @defaultModel?.DisplayName</MudText>
    <MudText>Deployment: @defaultModel?.Endpoint</MudText>
    @if (string.IsNullOrEmpty(defaultModel?.ApiKey) == false)
    {
        <MudText>Endpoint key has value</MudText>
    }
    else
    {
        <MudText>Endpoint key is null or empty</MudText>
    }
    @if (defaultModelConfig != null)
    {
        <MudText>Default model deployment endpoint config name: @defaultModelConfig.DeploymentEndpoint</MudText>
    }
    else
    {
        <MudText>Default model config is null</MudText>
    }
    @if (chatTestStatusLoading)
    {
        <MudText>Testing chat api</MudText>
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
    }
    else
    {
        <MudText Class="mt-4">@chatDbError</MudText>
        @if (string.IsNullOrEmpty(chatDbError) == true)
        {
            <MudText>Chat response: @chatResponse</MudText>
        }
    }
</MudPaper>


<MudPaper Class="mt-4 pa-4" Elevation="3">
    <MudText Typo="Typo.h6">OpenAi embedding creation status</MudText>
    <MudText>DeploymentName: @embeddingModel?.DeploymentName</MudText>
    <MudText>Name: @embeddingModel?.DisplayName</MudText>
    <MudText>Deployment: @embeddingModel?.Endpoint</MudText>
    @if (string.IsNullOrEmpty(embeddingModel?.ApiKey) == false)
    {
        <MudText>Endpoint key has value</MudText>
    }
    else
    {
        <MudText>Endpoint key is null or empty</MudText>
    }
    @if (embeddingModelConfig != null)
    {
        <MudText>Embedding model deployment endpoint config name: @embeddingModelConfig.DeploymentEndpoint</MudText>
    }
    else
    {
        <MudText>Embedding model config is null</MudText>
    }
    @if (embeddingTestStatusLoading)
    {
        <MudText>Testing embedding api</MudText>
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
    }
    else
    {
        <MudText Class="mt-4">@embeddingDbError</MudText>
        @if (string.IsNullOrEmpty(embeddingDbError) == true)
        {
            <MudText>Embedding vector dimension count: @embeddingTest?.ToFloats().ToArray().Count()</MudText>
        }
    }
</MudPaper>

<MudPaper Class="mt-4 pa-4" Elevation="3">
    <MudText Typo="Typo.h6">Config variables</MudText>
    <MudText>Environment: @aspnetCoreEnv</MudText>
    <MudText>Keyvault: @keyVaultName</MudText>
    <MudText>Rag db name: @ragDbName</MudText>
    <MudText>Rag projects collection name: @ragProjectCollectionName</MudText>
    <MudText>OpenAi endpoint: @openAiEndpoint</MudText>
</MudPaper>

<MudPaper Class="mt-4 pa-4" Elevation="3">
    <MudText Typo="Typo.h6">DefaultModel</MudText>
    <MudText>DeploymentName: @defaultModel?.DeploymentName</MudText>
    <MudText>Name: @defaultModel?.DisplayName</MudText>
    <MudText>Deployment: @defaultModel?.Endpoint</MudText>
</MudPaper>

<MudPaper Class="mt-4 pa-4" Elevation="3">
    <MudText Typo="Typo.h6">NamingModel</MudText>
    <MudText>DeploymentName: @namingModel?.DeploymentName</MudText>
    <MudText>Name: @namingModel?.DisplayName</MudText>
    <MudText>Deployment: @namingModel?.Endpoint</MudText>
</MudPaper>

@foreach (var endpoint in modelEndpoints)
{
    <MudPaper Class="mt-4 pa-4" Elevation="3">
        <MudText Typo="Typo.h6">ModelEndpoint</MudText>
        <MudText>Name: @endpoint?.Name</MudText>
        <MudText>Url: @endpoint?.Url</MudText>
    </MudPaper>
}


@code {
    [Inject] IConfiguration configuration { get; set; }
    [Inject] ISettingsService settingsService { get; set; }
    [Inject] IRagDatabaseService ragDatabaseService { get; set; }
    [Inject] IDatabaseService databaseService { get; set; }
    [Inject] IUserService userService { get; set; }
    [Inject] ILogger<UserService> userLogger { get; set; }

    private bool ragDbStatusLoading = true;
    private string? ragDbError = null;
    private int? ragDbProjectsCount = 0;
    private string? connStrForDisplayChat = null;

    private bool chatDbStatusLoading = true;
    private string? chatDbError = null;
    private int? chatDbUsersCount = 0;
    private string? connStrForDisplayRag = null;

    private string keyVaultName = string.Empty;
    private string aspnetCoreEnv = string.Empty;
    private string ragDbName = string.Empty;
    private string ragProjectCollectionName = string.Empty;

    private AiModel? defaultModel = null;
    private ModelConfig? defaultModelConfig = null;
    private AiModel? embeddingModel = null;
    private ModelConfig? embeddingModelConfig = null;
    private AiModel? namingModel = null;

    private OpenAIEmbedding? embeddingTest = null;
    private string? embeddingDbError = null;
    private bool embeddingTestStatusLoading = true;
    private ModelEndpoint? embeddingModelEndpoint = null;
    private string openAiEndpoint = string.Empty;

    private OpenAIEmbedding? chatTest = null;
    private string? chatApiError = null;
    private bool chatTestStatusLoading = true;
    private ModelEndpoint? chatModelEndpoint = null;
    private string chatResponse = string.Empty;

    private List<ModelEndpoint> modelEndpoints = [];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            CheckKeyVault();
            CheckEnv();
            checkModels();
            checkEndpointsConfig();
            CheckChatDbStatus();
            CheckRagDbStatus();
            CheckRagConfig();
            checkOpenAiConnectionEmbedding();
            checkOpenAiConnectionChat();
            StateHasChanged();
        }
    }

    private void checkEndpointsConfig()
    {
        var endpointSection = configuration.GetSection("Endpoints");
        modelEndpoints = endpointSection.Get<List<ModelEndpoint>>() ?? [];
    }

    private async Task checkOpenAiConnectionEmbedding()
    {
        embeddingTestStatusLoading = true;
        try
        {
            embeddingTest = await ragDatabaseService.GetEmbeddingForText("Test text");

        }
        catch (Exception e)
        {
            embeddingDbError = $"Error getting embedding: {e.Message}";
        }
        embeddingTestStatusLoading = false;
        StateHasChanged();
    }

    private async Task checkOpenAiConnectionChat()
    {
        IChatService chatService = new ChatService(userService, settingsService, userLogger);

        chatTestStatusLoading = true;
        try
        {
            WorkItemChat chat = new();
            chat.Settings = new ChatSettings()
            {
                MaxTokens = defaultModel.MaxTokens,
                Model = defaultModel.DeploymentName,
                Temperature = 0.5f
            };
            chat.Type = WorkItemType.Chat;
            chat.Settings.Prompt = $"Can you confirm that you received this message?\n\n";
            chatResponse = await chatService.GetChatResponseAsString(chat, defaultModel);
        }
        catch (Exception e)
        {
            chatApiError = $"Error getting chat response: {e.Message}";
        }
        chatTestStatusLoading = false;
        StateHasChanged();
    }

    private void checkModels()
    {
        defaultModel = settingsService.DefaultModel;
        embeddingModel = settingsService.EmbeddingModel;
        namingModel = settingsService.NamingModel;

        var modelSection = configuration.GetSection("Models");
        var models = modelSection.Get<List<ModelConfig>>();
        embeddingModelConfig = models?.FirstOrDefault(m => m.DisplayName == embeddingModel.DisplayName);
        defaultModelConfig = models?.FirstOrDefault(m => m.DisplayName == defaultModel.DisplayName);
    }

    private void CheckKeyVault()
    {
        keyVaultName = configuration.GetConnectionString("KeyVault");
    }

    private void CheckEnv()
    {
        aspnetCoreEnv = configuration["ASPNETCORE_ENVIRONMENT"];
    }

    private void CheckRagConfig()
    {
        ragDbName = configuration["RagProjectDefCollection"];
        ragProjectCollectionName = configuration["RagProjectDefCollection"];
    }

    private async Task CheckChatDbStatus()
    {
        ragDbStatusLoading = true;
        try
        {
            var connStrChat = configuration.GetConnectionString("MongoDb");
            if (!string.IsNullOrEmpty(connStrChat))
            {
                connStrForDisplayChat = GetConnectionStringForDisplay(connStrChat);
            }
            else
            {
                connStrForDisplayChat = "Unable to get connection string from dbContext";
            }
            chatDbUsersCount = (await databaseService.GetUsers()).Count();
        }
        catch (Exception e)
        {
            ragDbError = $"Error with database: {e.Message}";
        }
        chatDbStatusLoading = false;
        StateHasChanged();
    }

    private async Task CheckRagDbStatus()
    {
        ragDbStatusLoading = true;
        try
        {
            var connStrRag = configuration.GetConnectionString("MongoDbRagProjectDef");
            if (!string.IsNullOrEmpty(connStrRag))
            {
                connStrForDisplayRag = GetConnectionStringForDisplay(connStrRag);
            }
            else
            {
                connStrForDisplayRag = "Unable to get connection string from dbContext";
            }
            ragDbProjectsCount = (await ragDatabaseService.GetAllRagProjects()).Count();
        }
        catch (Exception e)
        {
            ragDbError = $"Error with database: {e.Message}";
        }
        ragDbStatusLoading = false;
        StateHasChanged();
    }

    private string? GetConnectionStringForDisplay(string connectionString)
    {
        var connStrDebug = Regex.Replace(connectionString, "//.+?@", "//xxxxx:xxxxx@");
        return connStrDebug;
    }

}
